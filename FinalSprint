<!DOCTYPE html>
<html>
<head>
	<title>Shopping List Ap 15070779 Paul Treadwell</title>
	<!-- scaling to increase size to thee device -->
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
	
	
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
	
	<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
	

		
	<!-- this below is an add on script link for the spinner box, needed in code if you want to use a spinner -->
	<script type="text/javascript" src="http://dev.jtsage.com/cdn/spinbox/latest/jqm-spinbox.min.js"></script> 
	
		
	<script>
	
	var strFoodName; //used to store current food that is going into the list - passed to the quantity
	var quantOfFood; //array to store quant of food in a list
	//global dictionary object to hold items and quantities -- not used now array is in place
	//var dictChosenItems = {}; 
	var intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
	//var arrListItemsCurrent = []; //stores each item that the current list being populated has on it
	
	var strHTMLConstructor; //used to store html code generated by function which loops through the array and reads out foodnames and quantities selected
	var codeToSearch; //takes the text out of the above variable and is used later to search inside of it to update it for the strikethough routine - to try and apply strike through HTML to the text when a button is clicked
	//global variables needed by the split string procedure and the deleteThis procedure to retrieve the index of the item beign delete from the UI
	var intIndexFound = 0;
	var itemSplitHolder ="";
	//holds all list items; used in UI and population of local storage
	//current holds items pulled from file name for constructing the list
	var arrItemQuant = []; //stores quantity of each item
	var arrItemTicked = []; //boolean value to see whether a person has ticked an item or not
	var arrListItemsCurrent = [];
	//holds all of the items from local storage
	//array used to hold file names stored in local storage
	var strArrFileNames = [];
	var arrListItemsFixed = [];
	//"Apples", "Aubergines", "Bananas", "Cherries", "Chives", "Fennel", "Potatoes", "Strawberries"
	//this is used to add new food items into the app when the user types them in, do not reassign data to thi with a new list, these need to be available all of the time, for all lists created
	var intMainPageListCounter;
	
	//var intStrArrFileNameIndPoint;
	var strExFileNameFromLocStor;
	var textFromInpFileName
	var textFromNewFoodItem;
	var strFoodItems; //used in storing food items to localstorage so they can be retrieved later
	var doubleTimer;
	var strFileName;
	var strTextFromMyFilter; //used when storing new list items to the food array & local store, global as it needs to be accessed in the capitalise function also
	
	var strDestringify; //used to hold the stringified text, ready to destringify it so that it will populate the arrays properly
	
	//variables underneath used for report generation
	var strSelectedMonth; //assigned from the UI - tels the computer which month the user has selected
	var intSelectedYear;	//assigned from the UI - tels the computer which year the user has selected
	var currentMonth; //stores current month that the app is beign used, assigned when the app is opened
	var currentYear; //stores current year that the app is beign used, assigned when the app is opened
	
	var lsStrMonthYearNameItem; //creates a string to name locaalstorage based on the month and year for the items
	var lsStrMonthYearNameQuant; //creates a string to name locaalstorage based on the month and year for the quantity
	
	//these will hold the items and quants per month for monthly report generation
	var lsMonthYearItemArr = [];
	var lsMonthYearQuantArr =[];
	
	//this will only ever be pushed to, to show all activity
	var lsMonthYearDateTickedArr =[];
	
	//used to hold the contents of local store items and quantities at different times so they can be split from here and populate the relative arrays
	var tempHoldLSNameForReport;
	
	//this holds the index of an item that already exists in local storage for the report, that needs incrementing or decrementing only (the item doesn't need adding to local storagem, just quantity needs updating)
	var indexToUpDateForReport;
	
	//these will hold the item to store to local store for report generation and the quant as per
	var itemToStoreLocalStore;
	var intIndexOfCurrItem;
	
	//needs to be global as used in many different subs - contains the quantity of the item that has been ticked
	var intQuantOfTicked;

	// stores data when an item is ticked so the report has the date that an item was ticked
	var dateOfTicked;
	
	var foodItemname; //used to hold teh current food item that has been selected for deletion 
	
		//ABSTRACT DESCRIPTION OF FUNCTION - initialisation routine - fired when loaded, initialises homescreen and other things, interacts with local storage
		$(document).ready(function() {
				if (localStorage.getItem("fileNames") === null) {
				//do nothing if there is nothing in local storage as there are no filenames to read into the main screen			
				}
				else {
					//read in filenames from local storage filenNames is the key
					strDestringify = localStorage.getItem("fileNames")
					//sort text out so that it is ready to populate the array
					deStringifyLocStoString(strDestringify);
					//splits the array values ready to read into the UL list
					strArrFileNames = strDestringify.split(",");
					//measure the array ready to loop through and feed in the appends to update each LI with the right file name
					var intstrArrFileNamesSize = strArrFileNames.length;
				
					for (i = 0; i < intstrArrFileNamesSize; i++) {
					//need to store what is already on the screen in a variable, then check to see if each array entry exists in the tex, if it does do nothing, else populate the page with the HTML code
						//var strHTMLConstructor = "<li> onmousedown='loadList(this)'" + strArrFileNames[i] + "</li>"; //&&&&&changed to onmousedown
						var strHTMLConstructor = "<li><a onmousedown='startTimer2(this)' onmouseup='loadList(this)'>" + strArrFileNames[i] + "</a></li>"; //&&&&&changed to onmousedown
						$("#newListFileNames").append(strHTMLConstructor);
						}
				}	
				
				
				//get date, store Month and Year, this will be used for the report generation and will be in the form of a string
				var currentDate = new Date();
				currentDate = currentDate.toDateString();
			
				//split and return the month and year parts of the data string
				var dateSplit= currentDate.split(" ");
				currentMonth = dateSplit[1];
				currentYear = dateSplit[3];
				
				lsStrMonthYearNameItem = currentMonth+currentYear; //will only look like Dec206 for example, localstorage will be Dec2016Item and Dec2016Quant
				lsStrMonthYearNameQuant = currentMonth+currentYear;
				
				lsStrMonthYearNameItem = lsStrMonthYearNameItem + "Item";
				lsStrMonthYearNameQuant = lsStrMonthYearNameQuant + "Quant";
				lsStrMonthYearNameDateTicked = currentMonth+currentYear+"DateTicked"; 
				
				
					if (localStorage.getItem(lsStrMonthYearNameItem) === null) {
					//do nothing if there is nothing in local storage as there are no items or quants to read in, this object will be created when someone ticks an item to say they have purchased it	
				
					//the local storage object is created elsewhere in the program
					}
					else {
					

					
							tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameItem) //called the contents of the variable, not this as a string
							//destringify them so they are ready to populate the array
							//deStringifyLocStoString(tempHoldLSNameForReport);
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
							//split the string into the array
							lsMonthYearItemArr = tempHoldLSNameForReport.split(",");
							//read in the quantity local storage object and populate the array ready to be updated
							//read in the items from local store
							tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameQuant) //called the contents of the variable, not this as a string
							
							//destringify them so they are ready to populate the array
							//deStringifyLocStoString(tempHoldLSNameForReport);
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
							tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
							//split the string into the array
							lsMonthYearQuantArr = tempHoldLSNameForReport.split(",");
						
					}	
				
				
				
				elementsOnScreen = $("#newListFileNames").text();
		
				//once population of list is done, mimic the enter press so UI is set up properly, otherwise it looks like each filename is a line of text, not a part of the filtered list
				//this does not work but seems to be needed for making the UI look good on a refresh
				
				
				
				//sets cursor into box - to help sort UI problem
				window.onload = enterOnLoad;
				
				
				//gets food item names from local store ready to populate the UI on the next page
				populateUIFromLocalStore();
		});
	
	
	
	
	
		//ABSTRACT DESCRIPTION OF FUNCTION - fired when user clicks to save teh currently constructing list, saves all data to local storage - item names and quantities
		function saveList(){
	
			//get the text from the input text box. this will be the filename to store.
			textFromInpFileName = $("#inpFileName").val();
			
			//for validation / finesse purposes, this is used to test if there are any elements in th elist, if not it shouldn't let the person save as it causes an empty list with an initial '0' blank entry
			var testEmptyList = $("#listElements").text();
			
			
			//checks to see if local storage is availabel on the device, if it is it will do this...	
			if (typeof(Storage) !== "undefined") {
							
					//these characters are not allowed in the filename as the routine has to take these out when data is transferred from the filename array. If I had time I would implement a routine which added a qualifier delimiter when these were added so they wouldn't be split  when these were found in certain instances
					
					//if the array is empty it will still write to the file, but a '0' entry will be on the final list, so stop this from happening here
					if (arrListItemsCurrent.length == 0){
					alert("There are no items in this list, please enter some before saving.");
					
					}
					
					//sometimes the list can be empty and the array size be greater than 0 if somthign has been added / deleted for example, so this will solve the same problem as above
					else if (testEmptyList == "") {
					
						alert("There are no items in this list, please enter some before saving.");
					
					}
					
					
					//check to see if a filename has been entered at all
					else if (textFromInpFileName == "") {
						alert("Please enter a filename before saving");
						
						//&&&&& put cursor in the input box ready for typing
						var input = document.querySelector("#myFilterFirstPage")
						input.focus();
		
						
				
					}
					//check to see if a comma has been entered as it will ruin the comma seperated values later for readback
					else if (textFromInpFileName.includes(",")) {
						alert("No commas in the file name please")
					
					}
					//check to see if a speech mark has been entered as it will MIGHT ruin the comma seperated values later for readback
					else if (textFromInpFileName.includes('"')) {
						alert("No speechmarks in the file name please")
					
					}
					
					//tests for [ and ] in the file name also as these make up part of the text using the stringify method
					else if (textFromInpFileName.includes('[')) {
						alert("No [ in the file name please")
					
					}
					
					//tests for [ and ] in the file name also as these make up part of the text using the stringify method
					else if (textFromInpFileName.includes(']')) {
						alert("No ] in the file name please")
					
					}
					
							
					//test whether the localstorage element is empty, if it is it will do this					
					else if (localStorage.getItem("fileNames") === null) {
								
							//add the new file name to the filename array to the end
							strArrFileNames.push(textFromInpFileName);
						
							//update fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
						localStorage["fileNames"] = JSON.stringify(strArrFileNames);
						
						
						//go save all items from array, all quantities, and whether each item has been ticked or not to local storage
						saveListItemsAndQuant()

						
					}
					
								
						//this means localStorage exists already, valid filename has been entered - no blank or commas, but fileNames doesn't exist in local storage - so it creates it 
					else {
												
							
						//updates the variable fileNames in local storage with the contents of the array which have been stored as a string like ["hello","hello 2"] etc
						
						
						//reads the filenames into the program as a string of text
						var strFileNames = JSON.parse(localStorage["fileNames"]);
						
						//checks to see if the newly entered filename exists in the array - not the best routine but works for now - returns true if the filename is found in this string
						var booFileNameExists = strFileNames.includes(textFromInpFileName)
						
						
						//checks to see if fileNames exists first, if not it puts the first filename in
						
						if (booFileNameExists == true){
							
								
								
								//alert to say - filename already exists, overwrite or cancel - overwrites if they select overwrite
								
								if (confirm('This filename already exists; do you want to overwrite?')) {
							
		
								//do not add the filename to the array as it already exists, this line of code will duplicate the filename existing on the first screen in the li
								
							
								//add fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
								localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
								//go an save all of the items in this particular list to local storagem, along with their quantities and whther they have been ticked or not
								saveListItemsAndQuant()
									
								
								} 	
		
								else {
								//do nothing instead
								}	
													
						}
							//save the file name and all list items & quants if a valid filename has been entered
						else if (booFileNameExists == false) {
										
									
							//add the new file name to the filename array
							strArrFileNames.push(textFromInpFileName);
							
							//add fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
							localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
							//go an save all of the items in this particular list to local storagem, along with their quantities and whther they have been ticked or not
							saveListItemsAndQuant()
									
						}
							
						
						
					}
					
			} 
				
				
				
			//called if localStorage doesn't exist	on the device
			else {
				alert("no storage support! Cannot save, please try on another device")
			}
							
			
		
		}
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - Saves the contents of the list with the file name as the key for the data structure in localstorage
		
		function saveListItemsAndQuant(){
				
				
				//variables declared to construct the name with listnamefood, listnamequant or listnameticked
				var locStorNameListItems = textFromInpFileName+"food"
				var locStorNameQuant = textFromInpFileName+"quant"
				var locStorNameTicked = textFromInpFileName+"ticked"
				
				
				//adds the list items and quants into localstorage so they can be pulled back later
				localStorage[locStorNameListItems] = JSON.stringify(arrListItemsCurrent);
				localStorage[locStorNameQuant] = JSON.stringify(arrItemQuant);	
				localStorage[locStorNameTicked] = JSON.stringify(arrItemTicked);	
				
				//this syntax works for pulling the data back from local storage - this syntax didn;t work to store it though - using variable+"string"
		
					
				var strItemsinCurrList = JSON.parse(localStorage[locStorNameListItems]);
				var strQuantsinCurrList = JSON.parse(localStorage[locStorNameQuant]);	
				var strTickedinCurrList = JSON.parse(localStorage[locStorNameTicked]);	
				
				goToStartAfterSave();
			
		}
		
		
		
	
		//ABSTRACT DESCRIPTION OF FUNCTION - deletes a filename  only runs when someone holds their mouse button down on a filename	- doesn't delete and all of the entries from the file (quant, items, ticked) - this is done elsewhere	
		function deleteFileName(){
		
					if (confirm('Do you want to delete this list from the database?')) {

						
						//find the element in the array, splice it based on what you found, rewrite the array back to local storage, refresh page
						
						//measure array to loop through it
						var intArraySize = strArrFileNames.length;
						
						//loop through the array and look for the selected item, once found, delete using the array.splice method
						
						
						for (i = 0; i < intArraySize; i++) {
							
							if (strFileName == strArrFileNames[i]) {
							
							strArrFileNames.splice(i,1);
							}
						
						}


							//this rotuine is for finesse - if you delete the last list name it leaves an array with a '0' size which still populates the UI with an empty slot, so this stops that from happening
							if (strArrFileNames.length == 0){
								
								localStorage.removeItem("fileNames");
								location.reload();
							
							}
							
							
							else {
							
							//rewrite the array back to local storage once one of the elements has been deleted
							localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							//repopulate the UI
						
						
							populateUIFromLocalStore();
							//$("#newListFileNames").listview("refresh");
						
							//it doesn't matter about the reload here as it won't interrupt anythign which isn't pulled from local storage
							location.reload();
							//refresh
							
							
							}
					} 	

					else {
					//do nothing instead if they dont want to delete
					}	
		
		}
	
	//ABSTRACT DESCRIPTION OF FUNCTION - takes item and quantity from common list items / quant screen and stores them to teh data structure	
	function storeDataToArray(){
				
		//gets the contents of the spinner object, uses val to convert the string of text to an integer
		quantOfFood = $("#spin").val(); 
		
		//alert(quantOfFood + " " + strFoodName + " added to the list"); //pops an alert up to tell them what they have added to the list
		
		//puts spinner back to 0
		resetSpinner();
		
		//adds chosen food and quant to a dictionary, not needed now we have the array
		//dictChosenItems[strFoodName] = quantOfFood; //add food and quant to dictionary
		
		//alert(JSON.stringify(dictChosenItems)); //show the dictionary data structure
		
		
		
		// for loop here to check to see if food item has been selected already and only updates quant only if it has, rather than adding redundant data to the list in the form of duplicated list items
		
		var i;
		var itemFound = false;
		var indexFoundAt;
		for (i = 0; i < intIndexPointer; i++) {
		
			if (arrListItemsCurrent[i] == strFoodName) {
			itemFound = true
			indexFoundAt = i;
			
			}
				
		}
		//(could have used append method instead
		
		
		if (itemFound == false) {
		
			//addss food and quantity to 2 arrays, will be controlled by same variable to ensure that they are both populated at the same index
			arrListItemsCurrent[intIndexPointer] = strFoodName;
			arrItemQuant[intIndexPointer] = quantOfFood;
			arrItemTicked[intIndexPointer] = false;
			intIndexPointer++;	
		
		}
		
		//runs this if the item already exists - locates its index and updates only the quantity
		
		else if (itemFound == true) {
			var intQuantConverter = parseInt(arrItemQuant[indexFoundAt]);
			var intNewQuantConverter = parseInt(quantOfFood);
			var intTotalQuant = intQuantConverter + intNewQuantConverter;
			arrItemQuant[indexFoundAt] = intTotalQuant;
		
		}
		
		

		
		//$("#listElements").append('<li>' + strFoodName + ' ' + quantOfFood + '<button class="delButton"> delete </button>' + '</li>')
		//finesse routine - after a new item has been stored, this will clear the text the user has put in and refreshes the list view when they get back to the page - 
		$("#myFilter").val("");
		$("#foodItemList").listview("refresh");
		$.mobile.changePage("#foodItems")
		
			
	}
		
		//ABSTRACT DESCRIPTION OF FUNCTION - populate common list itesm page with teh correct details of fooditems the person could add to teh list
		function populateListPage(){
		//clears all list elements in the UI in order to be repopulated - some things on other screens could have changed what is to be displayed on the screen		
		$("#listElements").empty();
			for (i = 0; i < intIndexPointer; i++) {
				if (arrItemTicked[i] == false) {
					strHTMLConstructor = "<li> <a onmousedown='startTimerDeleteItem(this)' onmouseup='newTickMethod(this)' >" + i + " " + arrListItemsCurrent[i] + "   X   " + arrItemQuant[i] + "<a/> </li>";
					$("#listElements").append(strHTMLConstructor);
					codeToSearch += strHTMLConstructor;
				}
				else if (arrItemTicked[i] == true) {
					strHTMLConstructor = "<li> <a onmousedown='startTimerDeleteItem(this)' onmouseup='newTickMethod(this)'>" + i + " " + "<strike>" + arrListItemsCurrent[i] + "   X   " + arrItemQuant[i] + "  " + "</strike> </a> </li>";
					$("#listElements").append(strHTMLConstructor);
					codeToSearch += strHTMLConstructor;
				}
				
			}
			$("#listElements").listview("refresh");
			
		}	
		
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - runs when the fooditem button is pressed, to detect whether the user wants to delete an item off of their currently being constructed list
		function startTimerDeleteItem(obj){
		
	

			
			//grabs the text element so if the personw ants to delete this, we can look in local storage and the array to delete it out
			foodItemname = ($(obj).text());
			
			//this function runs if the button is held down for half of a second, and asks the user if they want to delete the food item from the list
			itemDeltimer  = setTimeout(deleteThis, 500);
			
			//implement timer in here, if timer gets to a certain number then pop up message if they want to delete
		
		}
		
		
			
		//ABSTRACT DESCRIPTION OF FUNCTION - used to delete the names of food stuffs from the common items to add list
		//objThisRef is the object name passed from the button click, passes it so that it can delete the objects parent only and delete the whoel entry, nothing more / nothing less	
		function deleteThis(objThisRef){
		

	
			//var objDetails = $(objThisRef).parent().text();
			
			//this variable is set when the person mousedowns, so got the value from there
			var objDetails = foodItemname;
			//alert(objDetails);
		
			
			//split string run to find out what index number it is stored at in the array system
			splitStringDelFromArray(objDetails, " ");
			
			$(objThisRef).remove();
			

		

		}
		
			
			//ABSTRACT DESCRIPTION OF FUNCTION - splits teh JSOn strigified string and deletes the item, from teh data structure before writing back to local storage
			//splitstring - takes the string of text of the object that is being deleted, and splits it down to return its index in the array system - used for the delete item routine
			function splitStringDelFromArray (stringToSplit, seperator){
				var arrayOfStrings = stringToSplit.split(seperator);
			
				intIndexFound = parseInt(arrayOfStrings[0]);
				

				
				//empty the array so it always stores the index of the deleted item in index 0 of this array
						//its index is then used to delete it out of the array using the splice method, taken out of all 3 arrays - item name, quant, item ticked
				
				arrListItemsCurrent.splice(intIndexFound,1); 
				arrItemQuant.splice(intIndexFound,1);
				arrItemTicked.splice(intIndexFound,1);
				
				
				
				arrayOfStrings = [];
				intIndexPointer--;
				
				goToFinalShoppingList();		
			}
	
	
		
	
		//ABSTRACT DESCRIPTION OF FUNCTION - this runs on change of any tick box, and organises ticking / untickign items and ata production for both reports
		function newTickMethod (htmlText){
		

			
		
				//Clears the timer which is timing the user holding the button down to delete the item or strike it if it is just clicked, and te htimer doesn;t timeout
				clearTimeout(itemDeltimer);
		
				//generate a date 
				dateOfTicked = new Date();
				dateOfTicked = dateOfTicked.toDateString();
				//alert(dateOfTicked);
		
				// reads the text from the object that needs ticking into the function, passed via the time function which got the text element for the routine
				var strHtmltext = $(htmlText).text();
				
				//this will hold the split text to get the index of the array item we will be checking
				var textToSplitHere = [];
								
				//textToSplithere now holds the index of the item in the array that needs to be ticked, but it still has all of the other text in it also
				textToSplitHere = strHtmltext.split(" ");
				
				//this will always be the index of the item, this is a constant, stores the index of the item in question as a string
				intIndexOfCurrItem = parseInt(textToSplitHere[0]);
				
				//contains the numerical value of the quantity of the item that has been / ticked / unticked
				intQuantOfTicked = parseInt(arrItemQuant[intIndexOfCurrItem]);
				
				
				//had to get the name out of the original array rather than the split text as with multiple spaces in the food item name it threw the old routine out and the report wasn't populatign properly
				itemToStoreLocalStore = arrListItemsCurrent[intIndexOfCurrItem];

				
				
				//toggle test - to set the state of the items ticked status to true if it is false, or false if it is true, to toggle ticked / not ticked respectively
				if (arrItemTicked[intIndexOfCurrItem] == true){
				 arrItemTicked[intIndexOfCurrItem] = false;
			
				}
				
				else if (arrItemTicked[intIndexOfCurrItem] == false) {
				 arrItemTicked[intIndexOfCurrItem] = true;
			
				
				}

				//tests to see if the item has been ticked (true value in arrItemTicked Boolean array), and will organise to strike the text and update local storage for the report				
				if (arrItemTicked[intIndexOfCurrItem] == true) {
					
					//all underneath is for report page to ve generated based on ticked items this month
					
					//checks to see if local storage exists first based on the variable localstorage name - which is MonthYearItem stores the items for a particular month and year, as if it doesnt, we just need to add item and quant to the array, then create the local storage object
					if (localStorage.getItem(lsStrMonthYearNameItem) === null) {
					//in here means the localstorage object does not exists for thsi month and year
						//store item and quantity in the correct arrays ready to create the local store item
						lsMonthYearItemArr.push(itemToStoreLocalStore);
						lsMonthYearQuantArr.push(intQuantOfTicked);
						lsMonthYearDateTickedArr.push(itemToStoreLocalStore + " X " + intQuantOfTicked + " Ticked:  " + dateOfTicked)
						//need to stringify the above arrays - soft
						//construct the name for the local storage object based on the current month and date
						lsStrMonthYearNameItem = currentMonth+currentYear+"Item"; //will look like e.g. Dec2016Item
						lsStrMonthYearNameQuant = currentMonth+currentYear+"Quant"; //will look like e.g. Dec2016Quant
						lsStrMonthYearNameDateTicked = currentMonth+currentYear+"DateTicked"; // will look like Dec2016DateTicked
						
						//stringify each array and add to local storage
						localStorage[lsStrMonthYearNameItem] = JSON.stringify(lsMonthYearItemArr);
						localStorage[lsStrMonthYearNameQuant] = JSON.stringify(lsMonthYearQuantArr);
						localStorage[lsStrMonthYearNameDateTicked] = JSON.stringify(lsMonthYearDateTickedArr);
						
						//lsMonthYearDateTickedArr.push("Item: " + itemToStoreLocalStore + "Quantity: " + intQuantOfTicked + "Date of tick: " + dateOfTicked)
						//localStorage[lsStrMonthYearNameDateTicked] = JSON.stringify(lsMonthYearDateTickedArr);
	
					}
					
					//in here means local storage for this particulary month already exists, so it will be added to
					else {
						
						//first we need to check it and find out which index we need to update in the local store array for the report
				
						//read in the items from local store
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameItem) //called the contents of the variable, not this as a string
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
						//split the string into the array
						lsMonthYearItemArr = tempHoldLSNameForReport.split(",");
						
						
						//read in the quantity local storage object and populate the array ready to be updated
						//read in the items from local store
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameQuant) //called the contents of the variable, not this as a string
						
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
						//split the string into the array
						lsMonthYearQuantArr = tempHoldLSNameForReport.split(",");
						
						//at this point, the arrays are populated with the correct data from local storage, now we can amend them with ticked / unticked items
						
						//measure the array ready to loop through and find which index the item is at ready to update the quantity (if it is just the quant we are updating)
						var intstrArrFileNamesSize = lsMonthYearItemArr.length;
						//will let the routine know whether the item already exists, if it does just the quantity will update, if it doesn;t, th eitem will be pushed to the array as will the quantity
						var wordFound = false;
							for (i = 0; i < intstrArrFileNamesSize; i++) {
						
								if (lsMonthYearItemArr[i] == itemToStoreLocalStore) {
									
								//this variable now contains the index of the already existent item, so we can use it to update the quantity of the item that has just been ticked
								indexToUpDateForReport = i;
									
									
								wordFound = true;
								break;
									
								}
							
								
							}
								
							//will do this if the item doesn't already exist in the array - add item and quantity to the array	
							if (wordFound == false){
								//add the item and quantity to the correct arrays
								
								lsMonthYearItemArr.push(itemToStoreLocalStore);
								lsMonthYearQuantArr.push(intQuantOfTicked);
								
								//writeback to localstorage with the right yearmonthQuant name, this overwrites the data in there already
							localStorage[lsStrMonthYearNameItem] = JSON.stringify(lsMonthYearItemArr);
							localStorage[lsStrMonthYearNameQuant] = JSON.stringify(lsMonthYearQuantArr);
								
							
							
							}
							//will do this if the item does already exist in the array - update only the quantity by incrementing it (this is inside of the ticked routine so it will only increment)
							else if (wordFound == true){
							
								//update the quantity only in the array by addign what is in there already to the new quantity
							
								lsMonthYearQuantArr[indexToUpDateForReport] = parseInt(lsMonthYearQuantArr[indexToUpDateForReport]) + intQuantOfTicked
								
								//writeback to localstorage with the right yearmonthQuant name
								localStorage[lsStrMonthYearNameQuant] = JSON.stringify(lsMonthYearQuantArr);
								
								//populates page again below
					
							}
							
						//routine under here generated for the second report
						
						//read in the items from local store
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameDateTicked) //called the contents of the variable, not this as a string
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
						//split the string into the array
						lsMonthYearDateTickedArr = tempHoldLSNameForReport.split(",");	
							
							
						//add the new activity to the array
						lsMonthYearDateTickedArr.push(itemToStoreLocalStore + " X " + intQuantOfTicked + " Ticked:  " + dateOfTicked)
						
						localStorage[lsStrMonthYearNameDateTicked] = JSON.stringify(lsMonthYearDateTickedArr);
							
					
					}
				
				}
				
				
				//this routine for unticking an item, to unstrike - and take out of data for the report generation
				else if (arrItemTicked[intIndexOfCurrItem] == false) {
				
				
					//under here is the routine to update local store to take items from the report if they are not buying them
					
					//read in the items from local store -  item and quantity,
					
					
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameItem) //called the contents of the variable, not this as a string
						
						
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
					
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
					
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
			
						//split the string into the array
						lsMonthYearItemArr = tempHoldLSNameForReport.split(",");
						//read in the quantity local storage object and populate the array ready to be updated
						
						//read in the items from local store
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameQuant) //called the contents of the variable, not this as a string
					
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
						
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
						//split the string into the array
					
						lsMonthYearQuantArr = tempHoldLSNameForReport.split(",");
					
					
						
						 //will now contain the quantity of the food item to reduce - we are getting the quantity from local storage
						
						//get the index of the item we are looking for in the localstore data that has been put in the local store array
						var indexOfItemInLocalStore = lsMonthYearItemArr.indexOf(itemToStoreLocalStore);
						
						//use the index just generated to find out where our item is and 
						var intQuantToReduce = parseInt(lsMonthYearQuantArr[indexOfItemInLocalStore]);
						
	
						var intFinalQuant = intQuantToReduce - intQuantOfTicked;
						intFinalQuant = parseInt(intFinalQuant);
					
						//if the item has 0 or less in it, it will be taken out of both arrays so neither a '0' amount entry or negative amount entry exists
						if (intFinalQuant < 1) {
							
						
								//in here we have tested to see if that unticking the item has reduced the quantity to '0', if it has we will delete this item from the local storage arrays so it doesn't appear on the report
								
								lsMonthYearItemArr.splice(indexOfItemInLocalStore, 1);
								lsMonthYearQuantArr.splice(indexOfItemInLocalStore, 1);
								
								//also need to clear the array if it is empty
										
								//writeback to localstorage with the right yearmonthQuant name
								localStorage[lsStrMonthYearNameItem] = JSON.stringify(lsMonthYearItemArr);
								localStorage[lsStrMonthYearNameQuant] = JSON.stringify(lsMonthYearQuantArr);
								
								var intlsDataStructSize = lsMonthYearItemArr.length;
								
								
								
								//if the array has no contents, clear it and clear local storage - it ruins the report UI if not as there is an index in it if things have been added before and then taken away
														
								if (intlsDataStructSize == 0){
									
									
									lsMonthYearItemArr =[];
									lsMonthYearQuantArr =[];
									$("#finalReport").empty();
									//remove local storage otherwise the UI is affected as the array is split anyway later on
									localStorage.removeItem(lsStrMonthYearNameItem);
									localStorage.removeItem(lsStrMonthYearNameQuant);
									
								
								}
						
						
						}
						
						else {
						//alert("I am in anythign other than 0");
						//in here the item has a positive quantity, so should stay on the final report, just the quantity should be reduced
						
						//set the quantity value of the item in the local storage quantity array to what the new total is after taking away how many have been reduced after ticking
						lsMonthYearQuantArr[indexOfItemInLocalStore] = intFinalQuant;
						//writeback to localstorage with the right yearmonthQuant name
						
						
						//localStorage[lsStrMonthYearNameItem] = JSON.stringify(lsMonthYearItemArr);
						localStorage[lsStrMonthYearNameQuant] = JSON.stringify(lsMonthYearQuantArr);
						
						}
						
						
						//routine underneath here generated for second report
						
							//routine under here generated for the second report
						
						//read in the items from local store
						tempHoldLSNameForReport = localStorage.getItem(lsStrMonthYearNameDateTicked) //called the contents of the variable, not this as a string
						//destringify them so they are ready to populate the array
						//deStringifyLocStoString(tempHoldLSNameForReport);
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace('[','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(']','');
						tempHoldLSNameForReport = tempHoldLSNameForReport.replace(/"/g, '');
						//split the string into the array
						lsMonthYearDateTickedArr = tempHoldLSNameForReport.split(",");	
							
							
						//add the new activity to the array
						lsMonthYearDateTickedArr.push(itemToStoreLocalStore + " X " + intQuantOfTicked + " Unticked:  " + dateOfTicked)
						
						localStorage[lsStrMonthYearNameDateTicked] = JSON.stringify(lsMonthYearDateTickedArr);
				
				}
				//afterwards, refreshes the Ui by populating the List page, which checks to see if the array holdsa true value for beign checked, and will strike the text of those that have been ticked.
				populateListPage();
		
		}
		
		
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - deletes currently constructing list food item runs when the fooditem button is pressed
		function startTimer(obj){
			//grabs the text element so if the personw ants to delete this, we can look in local storage and the array to delete it out
			strFoodName = ($(obj).text());
			
			//this function runs if the button is held down for half of a second, and asks the user if they want to delete the food item from the list
			timer  = setTimeout(deleteListItem, 500);
			
			//implement timer in here, if timer gets to a certain number then pop up message if they want to delete
		
		}
		
		//this is for thefilenames - times and presents user with delete if held down
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - used to control whether teh person is deleting a food item from the currently constructing list or is deleting if holding finger down
		
		function startTimer2(objfilename){
			//grabs the text element so if the personw ants to delete this, we can look in local storage and the array to delete it out
			strFileName = ($(objfilename).text());
			
			//this function runs if the button is held down for half of a second, and asks the user if they want to delete the food item from the list
			timer2  = setTimeout(deleteFileName, 500);
			
			//implement timer in here, if timer gets to a certain number then pop up message if they want to delete
		
		}
		
		//ABSTRACT DESCRIPTION OF FUNCTION - simle change page routine
		function goToCreateNewReport(){
			$.mobile.changePage("#reportsPageMonthYear");
		
		}
		
		//ABSTRACT DESCRIPTION OF FUNCTION - simple change page routine
		function goToCreateNewReportSecond(){
		$.mobile.changePage("#reportsPageMonthYearSecond");
		
		}
	
	
		function homeFromReportSelect(){
		$.mobile.changePage("#newExistingLists");
		//this refreshes just the list UL, to fix UI issues
		//$("#newListFileNames").listview("refresh");
		
		}

	
		//ABSTRACT DESCRIPTION OF FUNCTION - loads the data for the selected month and year and populates the page with the correct report
		function populateAndLoadReport(monthObj){
			
			var arrayLength = lsMonthYearItemArr.length;
			
			//empty the UI ready to repopulate
			$("#finalReport").empty();
			//reads in the selected month and year
			strSelectedMonth = $(monthObj).parent().text();
			intSelectedYear = $("#spin1").val();
			var strToPullInCorrectLs = strSelectedMonth+intSelectedYear+"Item";
			var strToPullInCorrectLsQuant = strSelectedMonth+intSelectedYear+"Quant";
			if (localStorage.getItem(strToPullInCorrectLs) === null) {
						//in here means the localstorage object does not exists for thsi month and year
					alert("The report for this Month and Year does not exist yet, please select another month & year");
			}
			
			else {
						var stringifiedData = localStorage.getItem(strToPullInCorrectLs);//get data for local storage
							//destringify and read into arrays
							stringifiedData = stringifiedData.replace('[','');
							stringifiedData = stringifiedData.replace(']','');
							stringifiedData = stringifiedData.replace(/"/g, '');
							//split the string into the array
							lsMonthYearItemArr = stringifiedData.split(",");
							
							
							stringifiedData = localStorage.getItem(strToPullInCorrectLsQuant);//get data for local storage
							//destringify it & read into arrays
							stringifiedData = stringifiedData.replace('[','');
							stringifiedData = stringifiedData.replace(']','');
							stringifiedData = stringifiedData.replace(/"/g, '');
							//split the string into the array
							lsMonthYearQuantArr = stringifiedData.split(",");
						
							//clear the title on the generated report page and change for the selected Month and year
							$("#monthtitle").empty();
							$("#monthtitle").append(strSelectedMonth + " " + intSelectedYear);
							
							
							//loop through array and add LIs to the generated list report page
							var intstrArrFileNamesSize = lsMonthYearItemArr.length;
							for (i = 0; i < intstrArrFileNamesSize; i++) {
								var strHTMLConstructor = "<li><a href='#'>" + lsMonthYearItemArr[i] + "    X    " + lsMonthYearQuantArr[i] + "</a></li>"; //&&&&&changed to onmousedown
								$("#finalReport").append(strHTMLConstructor);
							}
							// go to that page
																					
							$.mobile.changePage("#MonthYearReportpage");
			
				//refreshes the UL so it doesn;t have the problem with the UI and we don;t have to reload
				$("#finalReport").listview("refresh");
			}
			
		}
		
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - populates the report with teh correct data based on teh selecte dmonth and year, for all activity report
		function populateAndLoadReportSecond(monthObj){
			
			//var arrayLength = lsMonthYearDateTickedArr.length;
			
			//empty the UI ready to repopulate
			$("#finalReportsecond").empty();
			//reads in the selected month and year
			strSelectedMonth = $(monthObj).parent().text();
			intSelectedYear = $("#spin2").val();
			var strToPullInCorrectLs = strSelectedMonth+intSelectedYear+"DateTicked";
			//var strToPullInCorrectLsQuant = strSelectedMonth+intSelectedYear+"Quant";
			if (localStorage.getItem(strToPullInCorrectLs) === null) {
						//in here means the localstorage object does not exists for thsi month and year
					alert("The report for this Month and Year does not exist yet, please select another month & year");
			}
			
			else {
						var stringifiedData = localStorage.getItem(strToPullInCorrectLs);//get data for local storage
							//destringify and read into arrays
							stringifiedData = stringifiedData.replace('[','');
							stringifiedData = stringifiedData.replace(']','');
							stringifiedData = stringifiedData.replace(/"/g, '');
							//split the string into the array
							lsMonthYearDateTickedArr  = stringifiedData.split(",");
						
							//clear the title on the generated report page and change for the selected Month and year
							$("#monthtitlesecond").empty();
							$("#monthtitlesecond").append("All activity for " + strSelectedMonth + " " + intSelectedYear);
							
							
							//loop through array and add LIs to the generated list report page
							var intstrArrFileNamesSize = lsMonthYearDateTickedArr.length;
							for (i = 0; i < intstrArrFileNamesSize; i++) {
								var strHTMLConstructor = "<li><a href='#'>" + lsMonthYearDateTickedArr[i] + "</a></li>"; //&&&&&changed to onmousedown
								$("#finalReportsecond").append(strHTMLConstructor);
							}
							// go to that page
																					
							$.mobile.changePage("#MonthYearReportpagesecond");
			
				//refreshes the UL so it doesn;t have the problem with the UI and we don;t have to reload
				$("#finalReportsecond").listview("refresh");
			}

		}
		
		
		
		
		
		
		
		//ABSTRACT DESCRIPTION OF FUNCTION - simple change page routine
		function loadYearMonthReportsPage(){
		
			$.mobile.changePage("#reportsPageMonthYear");
		}
		//ABSTRACT DESCRIPTION OF FUNCTION - simple change page routine
		function loadYearMonthReportsActivityPage(){
		
			$.mobile.changePage("#reportsPageMonthYearSecond");
		}
		
		//ABSTRACT DESCRIPTION OF FUNCTION - takes text variables containing data from local storage and formats it so that it can populate the given array
		function deStringifyLocStoString(textFromlocalStore){
		//edits the string so that it doesn't have any of the extra characters in it
				strDestringify = strDestringify.replace('[','');
				strDestringify = strDestringify.replace(']','');
				strDestringify = strDestringify.replace(/"/g, '');
		}

		

		
		

				
				
		//ABSTRACT DESCRIPTION OF FUNCTION - programmatically set the input textbox to have the cursor blinking inside of it first, so the list that has pulled in can then have enter pressed and look better on load
		function enterOnLoad() {
		
			
			//to achieve this - taken out property - autofocus="autofocus" from the input to try and get this to work
			
			//Set focus on input textbox;
			var input = document.querySelector("#myFilterFirstPage")
			
			input.focus();
			//refreshPage();
			
		
		}
				
				
						
		
				
		//ABSTRACT DESCRIPTION OF FUNCTION - deletes commonly added items list
		function deleteListItem(){
		
					if (confirm('Do you want to delete this food item from the list?')) {
					
					
			
						
						//find the element in the array, splice it based on what you found, rewrite the array back to local storage, refresh page
						
						//measure array to loop through it
						var intArraySize = arrListItemsFixed.length;
						
						//loop through the array and look for the selected item, once found, delete using the array.splice method
						
						
						for (i = 0; i < intArraySize; i++) {
							
							if (strFoodName == arrListItemsFixed[i]) {
							
							arrListItemsFixed.splice(i,1);
							}
						
						} 
						//rewrite the array back to local storage once one of the elements has been deleted
						localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
						//repopulate the UI
						populateUIFromLocalStore();
						//refresh
						
						
						//location.reload();
						
						//this refreshes just the food list UL, to fix the issue with deleting the currently constructed list from the UI
						$("#foodItemList").listview("refresh");
						
					}

					else {
					//do nothing instead if they dont want to delete
					}	
		
		}
				

				//@@@@@ passes the selected item from the main page to the quantity page ready to accept a quantity of how many you need
				//only runs when the button is pressed then depreseed - mouse up this runs
				function gotoQuantity(obj){
					//Clears the timer which is timing the user holding the button down
					clearTimeout(timer);
					//pass the obj paramter into the variable, obj will be set from the list view and will be passed using onClick, it will be the name of the food item
					strFoodName = ($(obj).text());
								
					//changes page to add the quantity that the person wants page
					$.mobile.changePage("#selectQuant");
										
					//updates the page with the name of the food item the user has selected
					$("#foodname").text(strFoodName); 
				}
	
				//ABSTRACT DESCRIPTION OF FUNCTION - this populates the food list item that - if it exist already in local storage or creates a local storage space to save the items before repopulating them into the UI
			function populateUIFromLocalStore(){
						//localStorage.removeItem("localStoredFooditems");
					if (typeof(Storage) !== "undefined") {
					//storage is available
				
						//tests to see if this particular key exists in local storage, returns true in this part of it doesn't exist
						if (localStorage.getItem("localStoredFooditems") === null) {
						//this means local store is empty for food item names
							
							$("#foodItemList").empty();
							
							//populate array ready to update the UI with preselected food items - used to give the user an idea of what to type in
							arrListItemsFixed = ["Apples", "Aubergines", "Bananas", "Cherries", "Chives", "Fennel", "Potatoes", "Strawberries"];
	
							//store them in local storage as a string using the stringify routine
							localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
							
							//reads them back into the program once they have been put in local storage, text now a string... needs splittign up / procesign before array / UI is populated
							//read in filenames from local storage filenNames is the key
					
							strDestringify = localStorage.getItem("localStoredFooditems")
							
							//sort text out so that it is ready to populate the array
							deStringifyLocStoString(strDestringify);
							//splits the array values ready to read into the UL list
							arrListItemsFixed = strDestringify.split(",");
						
							
							//measure the array ready to loop through and feed in the appends to update each LI with the right file name
							var intStrArrFoodListItemsSize = arrListItemsFixed.length;
						
							//<li><a onClick="loadList()">list 1 example</a></li>
							//</a></li>
							
										
							
							
								for (i = 0; i < intStrArrFoodListItemsSize; i++) {
								
								//need to store what is already on the screen in a variable, then check to see if each array entry exists in the tex, if it does do nothing, else populate the page with the HTML code
									var strHTMLConstructor = "<li><a onmousedown='startTimer(this)' onmouseup='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 
									// original -    var strHTMLConstructor = "<li><a onmousedown='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 

									
									$("#foodItemList").append(strHTMLConstructor);
									}
									
						
						
					
						}
					
						else {
						
						strFoodItems = localStorage.getItem("localStoredFooditems")
						
						
							$("#foodItemList").empty();
											
							
																
								//reads them back into the program once they have been put in local storage, text now a string... needs splittign up / procesign before array / UI is populated
							//read in filenames from local storage filenNames is the key
							strFoodItems = localStorage.getItem("localStoredFooditems")
							
							
							
							//edits the string so that it doesn't have any of the extra characters in it
							strFoodItems = strFoodItems.replace('[','')
							strFoodItems = strFoodItems.replace(']','')
							strFoodItems = strFoodItems.replace(/"/g, '')
							
							
							//measure the array ready to loop through and feed in the appends to update each LI with the right file name
							
							
							//splits the array values ready to read into the UL list
							arrListItemsFixed = strFoodItems.split(",");
							var intStrFoodListArrSize = arrListItemsFixed.length;
							
							/*
							for (i = 0; i < intStrFoodListArrSize; i++) {
							alert(arrListItemsFixed[i]);
							}
							
							*/
						
							//<li><a onClick="loadList()">list 1 example</a></li>
							//</a></li>
							
										
							
							
								for (i = 0; i < intStrFoodListArrSize; i++) {
								
								//need to store what is already on the screen in a variable, then check to see if each array entry exists in the tex, if it does do nothing, else populate the page with the HTML code
									
									var strHTMLConstructor = "<li><a onmousedown='startTimer(this)' onmouseup='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 
									//var strHTMLConstructor = "<li><a onClick=gotoQuantity(this)>" + arrListItemsFixed[i] + "</a></li>";
									$("#foodItemList").append(strHTMLConstructor);
									}
							
							
						}
				
					}
				
				
					else {
				
					
						alert("no storage support! Cannot save, please try on another device")
				
					}
			//this line of code sorts the UI out on the list filenames screen (new and existing lists), it refreshes the UL, not the page, sorting the problem out that I have had for ages	
			$("#newListFileNames").listview("refresh");
		}
	
		//used to capitalise the first letter of the food item input, so the array.sort mechanism works more effectively, otherwise A would be at the top and lower case a would be at the bottom
		function capitaliseFirstLetter(stringIn) {
			strTextFromMyFilter = stringIn.charAt(0).toUpperCase() + stringIn.slice(1);
			
		}
	

		//specifically for storing new food items to the array / UI / Local storage
		function storeNewFoodItems(){
			
			strTextFromMyFilter = $("#myFilter").val();
			//capitalise the first word to neaten up the UI / filtered list
				capitaliseFirstLetter(strTextFromMyFilter);
			
			
				
					//var i;
					var wordFound = false;
					var arrLength = arrListItemsFixed.length;
			
			//gets text just entered into the search box
			
			if (strTextFromMyFilter == "") {
			
				alert("You haven't typed the name of the food item you wish to add to the database, please type in a name");
			
			}
			
			else {
							
					for (i = 0; i < arrLength; i++) {
						if (strTextFromMyFilter == arrListItemsFixed[i]) {
						
							wordFound = true;
							break;
						}
						
					}	
					
					
					if (wordFound == false){
						
						//this means that it is a new item to be added to the list, we are going to add to array 
						arrListItemsFixed.push(strTextFromMyFilter);
						arrListItemsFixed.sort();
						
						
						// store the array contents to local storage as a single string
						localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
						//var strHTMLConstructor = "<li> <a onClick='gotoQuantity(this)'>" + strTextFromMyFilter + "</a></li>";
						//$("#foodItemList").append(strHTMLConstructor);
						
						//populate UI from local storerefresh page
						
						
						
						populateUIFromLocalStore();
						
						//this refreshes just the food list UL, to fix the issue with deleting the currently constructed list from the UI
						$("#foodItemList").listview("refresh");
						
						
					}
					else if (wordFound == true){
						alert("This word is already in the list, select it from below please");
					
					}
					
			
					$.mobile.changePage("#foodItems")
			
			}
			
			
					
			
		}
	
	

		
	
	//global variables, hold the list items taken from local storage, and the quantities, of the selected filename - to populate the correct arrays and pages with correct food stuffs and quantities later	
	var retrievedFoodList;
	var retrievedFoodQuant;
	var retrievedFoodTicked;
	var strListName; //global as we need to send the back to the textbox input box on the final list page when the list is loaded
	
	//function will load all list items when the filename has been clicked from the start screen
	
		function loadList(listName){
				clearTimeout(timer2);
				strListName = $(listName).parent().text();
				
				
				//add "food" to the end and "quant" as these are the names of the data items which store plain text the contents of the list arrays (both quant and food items)
				var listItem = strListName+"food";
				var listQuant = strListName+"quant";
				var listTicked = strListName+"ticked";
				
				//listItem and  listQuant now become the name of the local storage item that we want with correct string concatenated
				
				retrievedFoodList = localStorage.getItem(listItem);
				retrievedFoodQuant = localStorage.getItem(listQuant);
				retrievedFoodTicked = localStorage.getItem(listTicked);
				
				
				//remove all unwanted characters ready to populate the correct arrays / places on screen
				
				retrievedFoodList = retrievedFoodList.replace('[','')
				retrievedFoodList = retrievedFoodList.replace(']','')
				retrievedFoodList = retrievedFoodList.replace(/"/g, '')
				
				
				retrievedFoodQuant = retrievedFoodQuant.replace('[','')
				retrievedFoodQuant = retrievedFoodQuant.replace(']','')
				retrievedFoodQuant = retrievedFoodQuant.replace(/"/g, '')
				
				
				retrievedFoodTicked = retrievedFoodTicked.replace('[','')
				retrievedFoodTicked = retrievedFoodTicked.replace(']','')
				retrievedFoodTicked = retrievedFoodTicked.replace(/"/g, '')
				

				
				//need to populate the arrays  / UIs etc from this point onwards
				fromListNameToEditList()
				
				}
			
			
				function fromListNameToEditList(){
				
				//ckear all variables & data structures etc to load the new list
				intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
				arrListItemsCurrent = []; //clears this array ready to be populated again with the next list
				arrItemQuant = []; //as above
				arrItemTicked = []; // as above
				intIndexFound = 0; //helps delete entry
				itemSplitHolder =""; //helps delete entry
				//possibly need to clear some other global variables etc - check
				
				
				//split the fooditems, quantities and ticked values to populate the array ready to load in the correct data from the filename given
				arrListItemsCurrent = retrievedFoodList.split(",");
				arrItemQuant = retrievedFoodQuant.split(",");
				
				//the routine underneath converts the string of text true and false values to boolean values to populate the array with the correct values, otherwise other routines which later rely on values inside being set to true or false boolean values cannot run
				var arrStringItemTicked = retrievedFoodTicked.split(",");
				
				intIndexPointer = arrListItemsCurrent.length;
				
				for (i = 0; i < intIndexPointer; i++) {
				if (arrStringItemTicked[i] == "true") {
					arrItemTicked[i] = true
				}
				
				else {
					arrItemTicked[i] = false
				}
				
			}	
				
			
				//populate the list ready & go to list edit page
				
				
				
				goToFinalShoppingList();
			//set the textbox on the final list screen to the filename so it can be recorded over
			document.getElementById("inpFileName").value = strListName;
		
		}
	
	
	
	function goToFinalShoppingList(){ //in tutorial video this is called showChosenItems
	$.mobile.changePage("#finalShoppingList"); 
	populateListPage();
			
	}
	
	

	//add function that asks do you want to save before quitting?
	function saveBeforeQuitting(){
				if (confirm('Are you sure you want to go back to the home screen?')) {
				// Save it first - run the save routine
				
					if (confirm('Do you wish to save this list first?')) {
					// Save it first - run the save routine
					
					//go to save the list screen
					goToFinalShoppingList();	
					
					}
					
					else {
					document.getElementById("inpFileName").value = "";
					$.mobile.changePage("#newExistingLists")
					
					}
				
				} 	
				
				else {
				//do nothing
				
				}	
				
				//go to save the list screen
				//goToFinalShoppingList();	
				
			
				
		} 	
		
	
		//@@@@@ resets the spinner object	
		function resetSpinner(){
			$("#spin").val(1); //resets the spinner back to one for better user experience
		}
		
		//@@@@@ resets the spinner object then returns to main page
		function resetSpinreturnHome(){
			$("#spin").val(1); //resets the spinner back to one for better user experience
			$.mobile.changePage("#foodItems")
		}
		

		
		//USED TO GO FROM EXISTING FILEs page to food items list, resets index counters etc so a new list can be populated
		function goToFoodItems (){
		
		
			
			//little finesse routine - if a person types in a filename to search for and it doesn;t appear in the search from the initial screen, it will transfer the name they wanted into the file name ready to save
			var strPotentialnewListName = $("#myFilterFirstPage").val();
			
			//do nothing if the name box is empty when they click to create a new list item
			if (strPotentialnewListName == "") {
			
			
			}
			
			else {
			
			$("#inpFileName").val(strPotentialnewListName);
			
			}
		
		
		$.mobile.changePage("#foodItems"); //goes back to all items page so the user can add more items to their shoping list
		
		 intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
		 arrListItemsCurrent = []; //clears this array ready to be populated again with the next list
		 arrItemQuant = []; //as above
		 arrItemTicked = []; // as above
		 intIndexFound = 0; //helps delete entry
		 itemSplitHolder =""; //helps delete entry
		 
		 
		 
		 
		 
		
		}

		//return to main screen
		function returnNewAndExistingLists(){
			$.mobile.changePage("#newExistingLists"); //goes back to all items page so the user can add more items to their shoping list
			//refreshPage();
		
		}

		//only needed to test, deletes the local storage element I have been working with to test the app, delete when the app is finished
		function delLocalStorage(){
				localStorage.clear();


		
		}
		// after you have saved your list, takes you back to the home screen and then refreshes the page so the new list shows up
		function goToStartAfterSave(){
		$.mobile.changePage("#newExistingLists");
		location.reload();
		
		}
		

	
	</script>
	
		
	
</head>



<body>

<!------------------------------------------ All items available -------------------------------------------------->
	

	<div data-role="page" id="newExistingLists">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">

			</div>
		
			
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Your Lists</h2>
				
				
				<form class="ui-filterable">
					<input id="myFilterFirstPage" data-type="search" placeholder="Search / New List..." >
					
				</form>
				<button id="btnCreateNewList" onclick="goToFoodItems()">Create New List</button>
				<ul id="newListFileNames" data-role="listview" data-filter="true" data-input="#myFilterFirstPage" data-autodividers="false" data-inset="true">
					
				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
		<div data-role="navbar">
		<ul>
			<li><a href="#" id="deleteLocalStor" onclick="delLocalStorage()">Clear local store</a></li>
			<li><a href="#" id="btnNavToReport" data-icon="bullets" onclick="loadYearMonthReportsPage()"></a></li>
			<li><a href="#" id="btnNavToSecondReport" data-icon="calendar" onclick="loadYearMonthReportsActivityPage()"></a></li>
		</ul>
			</div>

		</div>
	

	</div>

	
<!------------------------------------------ All items available -------------------------------------------------->
	
	
	
	<div data-role="page" id="foodItems">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
	
			</div>
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Select your food...</h2>
				
				<form class="ui-filterable">
					<input id="myFilter" data-type="search" placeholder="Enter a food item...">
					
				</form>
				<button id="btnStoreNewFood" onclick="storeNewFoodItems()">Store new food item </button>
				<ul id="foodItemList" data-role="listview" data-filter="true" data-input="#myFilter" data-autodividers="true" data-inset="true">
			

				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
					<li><a href="#" data-icon="home" onclick="saveBeforeQuitting();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>

<!----------------------------------------- enter quantity of chosen item page ----------------------------------------->
		
	<div data-role="page" id="selectQuant">
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
			</div>
			
			
  		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
			<h2>Select Quantities</h2>
			
			
			<div class="ui-field-contain">
				<label for="spin" id="foodname"></label>
				<input type="text" data-role="spinbox" name="spin" id="spin" value="1" min="0" max="100"/>
			
			</div>
				
							
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="check" onclick="storeDataToArray();return false;"></a></li>
					<li><a href="#" data-icon="back" onclick="resetSpinreturnHome();return false;"></a></li>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>
	
	<!----------------------------------------- Final made list ----------------------------------------->
	
	
	
	<div data-role="page" id="finalShoppingList">
		<div data-role="header">
		<center> Enter a name for your list... </center>
			<input id="inpFileName" placeholder="Give your list a name..."> </input>
		
		
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div id="displayListItems">
			
			<form class="ui-filterable">
					<input id="myFilterLast" data-type="search" placeholder="Search your list...">
					
				</form>
								
				<ul id="listElements" data-role="listview" data-filter="true" data-input="#myFilterLast" data-autodividers="false" data-inset="true">
			
				</ul>
			</div>
		</div>
	
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#foodItems" data-icon="bullets"></a></li>
					<li><a href="#" data-icon="home" onclick="saveBeforeQuitting();return false;"></a></li>
					<li><a href="#" data-icon="check" onclick="saveList();return false;"></a></li>
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>
	
	
	
	<!----------------------------------------- Year and Month page for report generations ----------------------------------------->
		
	<div data-role="page" id="reportsPageMonthYear">
		<div data-role="header">
			<H3> Qualifying purchases</H3>		
		</div>
		<div style="text-align:center">
			<H5> Select a year and month for the Report</H2>
		</div>
		
		<div class="ui-field-contain" style="text-align:center">
			
			
				<label for="spin1" id="year">Year</label> 
				<input type="text" data-role="spinbox" name="spin1" id="spin1" value="2016" min="2016" max="2116"/>
				
			
			</div>
	
	

		<div data-role="main" class="ui-content">
			 <div data-role="main" class="ui-content">
				<ul data-role="listview" id="MonthList">
				  <li><a onmousedown="populateAndLoadReport(this)">Jan</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Feb</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Mar</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Apr</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">May</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Jun</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Jul</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Aug</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Sep</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Oct</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Nov</a></li>
				  <li><a onmousedown="populateAndLoadReport(this)">Dec</a></li>
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					
					<li><a href="#" data-icon="home" onclick="homeFromReportSelect();return false;"></a></li>
					
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>
	
	
	
	
	
	
	
	
	<!----------------------------------------- Year and Month reportPage ----------------------------------------->
		
	<div data-role="page" id="MonthYearReportpage">
		<div data-role="header">
			<H3 id="monthtitle"> qualifying purchases</H3>		
		</div>
		
		

		<div data-role="main" class="ui-content">
			 <div data-role="main" class="ui-content">
				<ul data-role="listview" id="finalReport">
				  
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="back" onclick="goToCreateNewReport();return false;"></a></li>
					<li><a href="#" data-icon="home" onclick="homeFromReportSelect();return false;"></a></li>
					
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>
	
<!----------------------------------------- All activity report generation ----------------------------------------->
		
	<div data-role="page" id="reportsPageMonthYearSecond">
		<div data-role="header">
			<H3> All monthly activity</H3>		
		</div>
		<div style="text-align:center">
			<H5> Select a year & month to see all activity for...</H2>
		</div>
		
		<div class="ui-field-contain" style="text-align:center">
			
			
				<label for="spin2" id="year">Year</label> 
				<input type="text" data-role="spinbox" name="spin2" id="spin2" value="2016" min="2016" max="2116"/>
				
			
			</div>
	
	

		<div data-role="main" class="ui-content">
			 <div data-role="main" class="ui-content">
				<ul data-role="listview" id="MonthListSecond">
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Jan</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Feb</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Mar</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Apr</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">May</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Jun</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Jul</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Aug</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Sep</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Oct</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Nov</a></li>
				  <li><a onmousedown="populateAndLoadReportSecond(this)">Dec</a></li>
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					
					<li><a href="#" data-icon="home" onclick="homeFromReportSelect();return false;"></a></li>
					
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>
	
	
	<!----------------------------------------- Year and Month reportPage activity for second report ----------------------------------------->
		
	<div data-role="page" id="MonthYearReportpagesecond">
		<div data-role="header">
			<H3 id="monthtitlesecond"> All monthly activity </H3>		
		</div>
		
		

		<div data-role="main" class="ui-content">
			 <div data-role="main" class="ui-content">
				<ul data-role="listview" id="finalReportsecond">
				  
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="back" onclick="goToCreateNewReportSecond();return false;"></a></li>
					<li><a href="#" data-icon="home" onclick="homeFromReportSelect();return false;"></a></li>
					
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>
	

	
</body>
</html>
