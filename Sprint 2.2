<!DOCTYPE html>
<html>
<head>
	<title>Shopping List</title>
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
	<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
		
	<!-- this below is an add on script link for the spinner box, needed in code if you want to use a spinner -->
	<script type="text/javascript" src="http://dev.jtsage.com/cdn/spinbox/latest/jqm-spinbox.min.js"></script> 
	
	
	
	<script>
	
	var strFoodName; //stores current food that is going into the list or into the new items 
	var quantOfFood;
	
	//global dictionary object to hold items and quantities -- not used now array is in place
	var dictChosenItems = {}; 

	var intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
	var arrListItems = []; //stores each item that the current list being populated has on it
	var arrItemQuant = []; //stores quantity of each item
	
	
	var itemTicked = []; //boolean value to see whether a person has ticked an item or not
	
	var output; //used to store html code generated by function which loops through the array and reads out foodnames and quantities selected
	var codeToSearch; //takes the output above and is used to search inside of it to update it for the strikethough routine - to try and apply strike through HTML to teh text when a button is clicked
	
	//global variables needed by the split string procedure and the deleteThis procedure to retrieve the index of the item beign delete from the UI
	var intIndexFound = 0;
	var itemSplitHolder ="";
	
	var mainPageListItems = ["Apples", "Aubergines", "Bananas", "Cherries", "Chives", "Fennel", "Potatoes", "Strawberries"];
	
	//this is used to add new food items into teh app when the user types them in, do not reassign data to thi with a new list, these need to be available all of the time, for all lists created
	var intMainPageListCounter;
	
	//array used to hold file names stored in local storage
	var strArrFileNames = [];
	//var intStrArrFileNameIndPoint;
	
	var strExFileNameFromLocStor;
	
	
		function saveList(){
	
			//get the text from the input text box. this will be the filename to store.
			var textFromInpFileName = $("#inpFileName").val();
			
			//checks to see if local storage is availabel on teh device, if it is it will do this...	
			if (typeof(Storage) !== "undefined") {
							

			
					//check to see if a filename has been entered at all
					if (textFromInpFileName == "") {
						alert("no filename entered");
			
					}
					//check to see if a comma has been entered as it will ruin teh comma seperated values later for readback
					else if (textFromInpFileName.includes(",")) {
						alert("no commas in the file name please")
					
					}
					//check to see if a speech mark has been entered as it will MIGHT ruin teh comma seperated values later for readback
					else if (textFromInpFileName.includes('"')) {
						alert("no commas in the file name please")
					
					}
							
					//test whether the localstorage element is empty, if it is it will do this					
					else if (localStorage.getItem("fileNames") === null) {
					
						alert("empty, just storing");
						
							//add the new file name to the filename array
							strArrFileNames.push(textFromInpFileName);
						
							//update fileNames in localStorage with teh string of filenames, which can be split later using comma and pulled back into the initial screen
						localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
						
					}
					
			
						//this means localStorage exists already, valid filename has been entered - no blank or commas, but fileNames doesn't exist in local storage - so it creates it 
					else {
						alert("localstorage exists, addign to")
							
							
						//updates the variable fileNames in local storage with the contents of teh array which have been stored as a string like ["hello","hello 2"] etc
						//localStorage["fileNames"] = JSON.stringify(strArrFileNames);
						
						//reads the filenames into the program as a string of text
						var strFileNames = JSON.parse(localStorage["fileNames"]);
						
						//checks to see if the newly entered filename exists in the array - not the best routine but works for now - returns true if the filename is found in this string
						var booFileNameExists = strFileNames.includes(textFromInpFileName)
						
						
						//checks to see if fileNames exists first, if not it puts the first filename in
						

						
						
						if (booFileNameExists == true){
						
							alert("This filename already exists, please select another filename")
						}
						//save the file name and all list items & quants if a valid filename has been entered
						else if (booFileNameExists == false) {
									
												
							
							
							//add the new file name to the filename array
							strArrFileNames.push(textFromInpFileName);
						
							//add fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
							localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
						
								
						}
							
						
						
					}
					
					
				// Saves the contents of the list with the file name as the key for the data structure in localstorage
				
				//variables declared to construct the name with listnamefood or listnamequant
				var locStorNameListItems = textFromInpFileName+"food"
				var locStorNameQuant = textFromInpFileName+"quant"
				
				
				//adds the list items and quants into localstorage so they can be pulled back later
				localStorage[locStorNameListItems] = JSON.stringify(arrListItems);
				localStorage[locStorNameQuant] = JSON.stringify(arrItemQuant);	
				
				//this syntax works for pulling the data back from local storage - this syntax didn;t work to store it though - using variable+"string"
				//var strItemsinCurrList = JSON.parse(localStorage[textFromInpFileName+"food"]);
				//var strQuantsinCurrList = JSON.parse(localStorage[textFromInpFileName+"quant"]);	
					
				var strItemsinCurrList = JSON.parse(localStorage[locStorNameListItems]);
				var strQuantsinCurrList = JSON.parse(localStorage[locStorNameQuant]);	
			} 
				
				
				
			//called if localStorage doesn't exist	on the device
			else {
			
				alert("no storage support! Cannot save, try on another device")
			
			}
							
			
				
				alert(strFileNames)
				alert(booFileNameExists)
				alert(JSON.stringify(strArrFileNames));
				alert(strItemsinCurrList)
				alert(strQuantsinCurrList)
		
		
		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		// might not need these functions @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


		$(document).ready(function() {
        //alert("form loaded");
		
		//need to pull filenames from local storage and populate the UL on the first page with this when teh document loads
	
		if (localStorage.getItem("fileNames") === null) {
		//do nothing if there is nothing in local storage as there are no filenames to read into teh main screen			
		}
					
		else {
		//read in filenames from local storage filenNames is teh key
		strExFileNameFromLocStor = localStorage.getItem("fileNames")
		
		
		//<li><a onClick="loadList()">list 1 example</a></li>
		//<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
		
		
		
		//var strHTMLConstructor = "<li> <a onClick='gotoQuantity(this)'>" + strTextFromMyFilter + "</a></li>";
		//$("#foodItemList").append(strHTMLConstructor);
		
		
		
		
		}
		
		
		});
		
	
		function storeNewFoodItems(){
			
			var strTextFromMyFilter = $("#myFilter").val();
			var constructedListEntry;
			var i;
			var wordFound = false;
			var intMainPageListCounter = mainPageListItems.length;
			
									
			for (i = 0; i < intMainPageListCounter; i++) {
				if (strTextFromMyFilter == mainPageListItems[i]) {
					wordFound = true;
					break;
				}
				
			}	
			
			
			if (wordFound == false){
	
				var strHTMLConstructor = "<li> <a onClick='gotoQuantity(this)'>" + strTextFromMyFilter + "</a></li>";
				$("#foodItemList").append(strHTMLConstructor);
			}
			else if (wordFound == true){
			alert("This word is already in the list, select it from below please");
			
			}
			returnToFoodItems();
	}
	
	
	
	
	
	// I think I need to change this, instead of storing data to the list, it stores it to local storage instead... have a page that allows you to click to create a new list, give it a name, store the list name in secondary storage, then this can be used to pull the data back
	
	function storeDataToArray(){ //on video this function is called backToList
				
		//gets the contents of the spinner object, uses val to convert the string of text to an integer
		quantOfFood = $("#spin").val(); 
		
		//alert(quantOfFood + " " + strFoodName + " added to the list"); //pops an alert up to tell them what they have added to the list
		
		//puts spinner back to 0
		resetSpinner();
		
		//adds chosen food and quant to a dictionary, not needed now we have the array
		//dictChosenItems[strFoodName] = quantOfFood; //add food and quant to dictionary
		
		//alert(JSON.stringify(dictChosenItems)); //show the dictionary data structure
		
		
		
		// for loop here to check to see if food item has been selected already and only updates quant only if it has, rather than adding redundant data to the list in the form of duplicated list items
		
		var i;
		var itemFound = false;
		var indexFoundAt;
		for (i = 0; i < intIndexPointer; i++) {
		
			if (arrListItems[i] == strFoodName) {
			itemFound = true
			indexFoundAt = i;
			
			}
				
		}
		
		if (itemFound == false) {
		
		//addss food and quantity to 2 arrays, will be controlled by same variable to ensure that they are both populated at the same index
		arrListItems[intIndexPointer] = strFoodName;
		arrItemQuant[intIndexPointer] = quantOfFood;
		intIndexPointer++;	
		
		}
		
		else if (itemFound == true) {
		var intQuantConverter = parseInt(arrItemQuant[indexFoundAt]);
		var intNewQuantConverter = parseInt(quantOfFood);
		var intTotalQuant = intQuantConverter + intNewQuantConverter;
		arrItemQuant[indexFoundAt] = intTotalQuant;
		
		}
		
		

		
		//$("#listElements").append('<li>' + strFoodName + ' ' + quantOfFood + '<button class="delButton"> delete </button>' + '</li>')
		
		returnToFoodItems()
		
			
	}
	
	
	
	
	function goToFinalShoppingList(){ //in tutorial video this is called showChosenItems
	$.mobile.changePage("#finalShoppingList"); 
	//$("#displayListItems").text(JSON.stringify(dictChosenItems)) //displays the contents of the dictionary all on one line, seperates them by comma
	
	
	
	//underneath loops through the array using a for loop to output each item individually
	
	//for (var key in dictChosenItems){
		//output += key + " -> " + dictChosenItems[key] + "<hr/>";	//+= increments the value so the string is added to
	
	//}
	//$("#displayListItems").html(output) //html output here as we are using HTMl in the strign of text to be output
	
		
		//might need the underneath for loop
		
		
	
		output = ""; //@@@@@@@@@@ variable needs to be made global as the strike text needs to search in here to find teh text to strike, strike it, then put it back into the page as code
		var i;
		for (i = 0; i < intIndexPointer; i++) {
		//output += i + ". " + arrListItems[i] + " " + arrItemQuant[i] + "  "  +  "<button> tick </button>" + "  "  +  "<button onclick='$(this).parent().remove()'>Click me</button>" + "<hr>";
		//$("displayListItems").append(output += i + ". " + arrListItems[i] + " " + arrItemQuant[i] + "<hr>");
		output += "<li>" + i + " " + arrListItems[i] + " " + arrItemQuant[i] + "  "  + "<input type='checkbox' class='allCheckBox'>" + "<button class='strikeButton' onclick='strikeText(this)'>Tick</button>" + "<button class='delButton' onclick='deleteThis(this)'>Delete?</button>" + "</li>";
		
		}
		codeToSearch = output;
		
		
		
		$("#displayListItems").html(output) //html output here as we are using HTML in the string of text to be output
		//$("#listElements").append(output);
		//$("#displayListItems").append(output);
		
		
	}
	
	
	
	

	
	
	function strikeText(textToStrike){
		var textToStrike = $(textToStrike).parent().text();
		
		var deleteBeforeStrike = textToStrike.replace("TickDelete?", "");
		var struckText = deleteBeforeStrike.strike();
		var editedTextWithStrike = codeToSearch.replace(deleteBeforeStrike, struckText);
		$("#displayListItems").html(editedTextWithStrike);
		
		//routine works, but keeps overwriting page every load - need to transfer the striuck text into output variable
		
	}
	

	
	
// @@@@@@@@@@@@@@@@@@@@@@@@@ functiosn underneath can be left alone for the minute as they are working and done @@@@@@@@@@@@@@@@@@@@@@@@@
	
	//@@@@@first routine that allows you to delete from yoru currently constructed list
	//objThisRef is the object name passed from the button click, passes it so that it can delete the objects parent only and delete the whoel entry, nothing more / nothing less	
	function deleteThis(objThisRef){
	
		var objDetails = $(objThisRef).parent().text();
		$(objThisRef).parent().remove();
		
		//split string run to find out what index number it is stored at in the array system
		splitStringDelFromArray(objDetails, " ");
		

	}
	
	//@@@@@second routine that allows you to delete from your currently constructed list
	
	//splitstring - takes the string of text of the object that is being deleted, and splits it down to return its index in the array system
	function splitStringDelFromArray (stringToSplit, seperator){
		var arrayOfStrings = stringToSplit.split(seperator);
			//alerts used to track what was happening inside of the array in order to complete the delete entry routine
		//intIndexFound = arrListItems.indexOf(arrayOfStrings[0]);
		//alert("item we are looking for is" + arrayOfStrings[0]);
		intIndexFound = parseInt(arrayOfStrings[0]);
		//alert("index in question is " + intIndexFound);
		
		//empty the array so it always stores the index of teh deleted item in index 0 of this array
				//its index is then used to delete it out of the array using the splice method, taken out of both arrays
		
		arrListItems.splice(intIndexFound,1); 
		arrItemQuant.splice(intIndexFound,1);
		
		//alert("arrListItems index 0 now contains" + arrListItems[0]);
		//alert("arrListItems index 1 now contains" + arrListItems[1]);
		//alert("arrListItems index 2 now contains" + arrListItems[2]);
		
		arrayOfStrings = [];
		intIndexPointer--;
		
		goToFinalShoppingList();		
	}
	
	
	
	//add function that asks do you want to save before quitting?
	function saveBeforeQuitting(){
	if (confirm('Do you wish to save this list?')) {
    // Save it first - run the save routine
	
	//return to main screen
	returnNewAndExistingLists()
	} 	
	
	else {
    // Do nothing!
}
	
	}
	
	
	
	//@@@@@ passes teh selected item from the main page to the quantity page ready to accept a quantity of how many you need
	function gotoQuantity(obj){
		//pass the obj paramter into the variable, obj will be set from the list view and will be passed using onClick, it will be the name of the food item
		strFoodName = ($(obj).text());
					
		//changes page to add the quantity that the person wants page
		$.mobile.changePage("#selectQuant");
		//updates the page with the name of the food item the user has selected
		$("#foodname").text(strFoodName); 
	}
	
	//@@@@@ resets the spinner object	
	function resetSpinner(){
		$("#spin").val(1); //resets the spinner back to one for better user experience
	}
	
	//@@@@@ resets the spinner object then returns to main page
	function resetSpinreturnHome(){
		$("#spin").val(1); //resets the spinner back to one for better user experience
		returnToFoodItems()
	}
	
	//returns to main page to select / add new items
	function returnToFoodItems(){
	$.mobile.changePage("#foodItems"); //goes back to all items page so the user can add more items to their shoping list
	
	}
	
	//USED TO GO FROM EXISTING FILEs page to food items list, resets index counters etc so a new list can be populated
	function goToFoodItems (){
	$.mobile.changePage("#foodItems"); //goes back to all items page so the user can add more items to their shoping list
	
	 intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
	 arrListItems = []; //stores each item that teh current list being populated has on it
	 arrItemQuant = []; //stores quantity of each item
	 intIndexFound = 0; //helps delete entry
	 itemSplitHolder =""; //helps delete entry
	
	}

	//return to main screen
	function returnNewAndExistingLists(){
		$.mobile.changePage("#newExistingLists"); //goes back to all items page so the user can add more items to their shoping list
		
	
	}

	//only needed to test, deletes the local storage element I have been working with to test the app, delete when the app is finished
	function delLocalStorage(){
	var temp = localStorage.getItem("fileNames")
	alert(temp)
	localStorage.removeItem("fileNames");
	var temp = localStorage.getItem("fileNames")
	alert(temp)
	
	
	}
	
	
	</script>
	
		
	
</head>



<body>



<!------------------------------------------ All items available -------------------------------------------------->
	

	<div data-role="page" id="newExistingLists">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
	
			</div>
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Your Lists</h2>
				
				<form class="ui-filterable">
					<input id="myFilterFirstPage" data-type="search" placeholder="Search for an existing list...">
					
				</form>
				<button id="btnCreateNewList" onclick="goToFoodItems()">Create New List</button>
				<ul id="newListFileNames" data-role="listview" data-filter="true" data-input="#myFilterFirstPage" data-autodividers="false" data-inset="true">
					<li><a onClick="#">list 1 example</a></li>
					<li><a onClick="#">list 2 example</a></li>
					<li><a onClick="#">list 3 example</a></li>
					<li><a onClick="#">list 4 example</a></li>
					<li><a onClick="#">list 5 example</a></li>

				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<button id="deleteLocalStor" onclick="delLocalStorage()">Create New List</button>
			</div>

		</div>
	

	</div>

	
<!------------------------------------------ All items available -------------------------------------------------->
	
	
	
	<div data-role="page" id="foodItems">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
	
			</div>
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Select your food...</h2>
				
				<form class="ui-filterable">
					<input id="myFilter" data-type="search" placeholder="Enter a food item...">
					
				</form>
				<button id="btnStoreNewFood" onclick="storeNewFoodItems()">Store new food item </button>
				<ul id="foodItemList" data-role="listview" data-filter="true" data-input="#myFilter" data-autodividers="true" data-inset="true">
					<li><a onClick="gotoQuantity(this)">Apples</a></li>
					<li><a onClick="gotoQuantity(this)">Aubergines</a></li>
					<li><a onClick="gotoQuantity(this)">Bananas</a></li>
					<li><a onClick="gotoQuantity(this)">Cherries</a></li>
					<li><a onClick="gotoQuantity(this)">Chives</a></li>
					<li><a onClick="gotoQuantity(this)">Fennel</a></li>
					<li><a onClick="gotoQuantity(this)">Potatoes</a></li>
					<li><a onClick="gotoQuantity(this)">Strawberries</a></li>

				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
					<li><a href="#" data-icon="home" onclick="saveBeforeQuitting();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>

<!----------------------------------------- enter quantity of chosen item page ----------------------------------------->
		
	<div data-role="page" id="selectQuant">
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
			</div>
  		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
			<h2>Select Quantities</h2>
			
			
			<div class="ui-field-contain">
				<label for="spin" id="foodname"></label>
				<input type="text" data-role="spinbox" name="spin" id="spin" value="1" min="0" max="100"/>
			
			</div>
				
							
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="check" onclick="storeDataToArray();return false;"></a></li>
					<li><a href="#" data-icon="back" onclick="resetSpinreturnHome();return false;"></a></li>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>
	
	<!----------------------------------------- Final made list ----------------------------------------->
		
	<div data-role="page" id="finalShoppingList">
		<div data-role="header">
			<input id="inpFileName" placeholder="Give your list a name..."> </input>
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div id="displayListItems">
				<ul id="listElements">
			
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#foodItems" data-icon="bullets"></a></li>
					<li><a href="#newExistingLists" data-icon="home"></a></li>
					<li><a href="#" data-icon="check" onclick="saveList();return false;"></a></li>
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>


	
</body>
</html>
