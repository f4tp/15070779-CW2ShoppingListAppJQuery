<!DOCTYPE html>
<html>
<head>
	<title>Shopping List</title>
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css" />
	<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
	<script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>
		
	<!-- this below is an add on script link for the spinner box, needed in code if you want to use a spinner -->
	<script type="text/javascript" src="http://dev.jtsage.com/cdn/spinbox/latest/jqm-spinbox.min.js"></script> 
	
	
	<!-- - &&&&& for when I am refactoring code <script src=“myScript.js”></script> -->
	<script>
	
	var strFoodName; //used to store current food that is going into the list - passed to teh quantity
	var quantOfFood; //array to store quant of food in a list
	//global dictionary object to hold items and quantities -- not used now array is in place
	var dictChosenItems = {}; 
	var intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
	//var arrListItemsCurrent = []; //stores each item that the current list being populated has on it
	var arrItemQuant = []; //stores quantity of each item
	var arrItemTicked = []; //boolean value to see whether a person has ticked an item or not
	var strHTMLConstructor; //used to store html code generated by function which loops through the array and reads out foodnames and quantities selected
	var codeToSearch; //takes the text out of teh above variable and is used later to search inside of it to update it for the strikethough routine - to try and apply strike through HTML to the text when a button is clicked
	//global variables needed by the split string procedure and the deleteThis procedure to retrieve the index of the item beign delete from the UI
	var intIndexFound = 0;
	var itemSplitHolder ="";
	//holds all list items; used in UI and population of local storage
	//current holds items pulled from file name for constructing the list
	var arrListItemsCurrent = [];
	//holds all of teh items from local storage
	var arrListItemsFixed = [];
	//"Apples", "Aubergines", "Bananas", "Cherries", "Chives", "Fennel", "Potatoes", "Strawberries"
	//this is used to add new food items into the app when the user types them in, do not reassign data to thi with a new list, these need to be available all of the time, for all lists created
	var intMainPageListCounter;
	//array used to hold file names stored in local storage
	var strArrFileNames = [];
	//var intStrArrFileNameIndPoint;
	var strExFileNameFromLocStor;
	var textFromInpFileName
	var textFromNewFoodItem;
	var strFoodItems; //used in storing food items to localstorage so they can be retrieved later
	var doubleTimer;
	var strFileName;
	var strTextFromMyFilter; //used when storing new list items to teh food array & local store, global as it needs to be accessed in the capitalise function also
	
	var strDestringify; //used to hold the stringified text, ready to destringify it so that it will populate the arrays properly
					
		//takes text variables containing data from local storage and formats it so that it can populate the given array
		function deStringifyLocStoString(textFromlocalStore){
		//edits the string so that it doesn't have any of the extra characters in it
				strDestringify = strDestringify.replace('[','')
				strDestringify = strDestringify.replace(']','')
				strDestringify = strDestringify.replace(/"/g, '')
		}

		
		$(document).ready(function() {
			if (localStorage.getItem("fileNames") === null) {
			//do nothing if there is nothing in local storage as there are no filenames to read into teh main screen			
			}
			else {
				//read in filenames from local storage filenNames is the key
				strDestringify = localStorage.getItem("fileNames")
				//sort text out so that it is ready to populate the array
				deStringifyLocStoString(strDestringify);
				//splits the array values ready to read into the UL list
				strArrFileNames = strDestringify.split(",");
				//measure the array ready to loop through and feed in the appends to update each LI with the right file name
				var intstrArrFileNamesSize = strArrFileNames.length;
			
				for (i = 0; i < intstrArrFileNamesSize; i++) {
				//need to store what is already on the screen in a variable, then check to see if each array entry exists in teh tex, if it does do nothing, else populate the page with teh HTML code
					//var strHTMLConstructor = "<li> onmousedown='loadList(this)'" + strArrFileNames[i] + "</li>"; //&&&&&changed to onmousedown
					var strHTMLConstructor = "<li><a onmousedown='startTimer2(this)' onmouseup='loadList(this)'>" + strArrFileNames[i] + "</a></li>"; //&&&&&changed to onmousedown
					$("#newListFileNames").append(strHTMLConstructor);
					}
					//refreshPage();
			}	
			
			elementsOnScreen = $("#newListFileNames").text();
	
			//once population of list is done, mimic teh enter press so UI is set up properly, otherwise it looks like each filename is a line of text, not a part of the filtered list
			//this does not work but seems to be needed for making the UI look good on a refresh
			mimicEnterPressed();
			
			
			//sets cursor into box - to help sort UI problem
			window.onload = enterOnLoad;
			
			
			//gets food item names from local store ready to populate the UI on the next page
			populateUIFromLocalStore();
		});
				
				
		//programmatically set the input textbox to have teh cursor blinking inside of it first, so the list that has pulled in can then have enter pressed and look better on load
		function enterOnLoad() {
		
			
			//to achieve this - taken out property - autofocus="autofocus" from the input to try and get this to work
			
			//Set focus on input textbox;
			var input = document.querySelector("#myFilterFirstPage")
			
			input.focus();
			//refreshPage();
			
		
		}
				
				
			//var timer; //global holds teh timer, multiple functions have to access it - to start and stop it	
				
		//runs when the fooditem button is pressed
		function startTimer(obj){
		//grabs teh text element so if teh personw ants to delete this, we can look in local storage and the array to delete it out
		strFoodName = ($(obj).text());
		
		//this function runs if teh button is held down for half of a second, and asks teh user if they want to delete teh food item from the list
		timer  = setTimeout(deleteListItem, 500);
		
		//implement timer in here, if timer gets to a certain number then pop up message if they want to delete
		
		}
		
		//this is for thefilenames - times and presents user with delete if held down
		
		
		
		function startTimer2(objfilename){
		//grabs teh text element so if the personw ants to delete this, we can look in local storage and the array to delete it out
		strFileName = ($(objfilename).text());
		
		//this function runs if teh button is held down for half of a second, and asks teh user if they want to delete teh food item from the list
		timer2  = setTimeout(deleteFileName, 500);
		
		//implement timer in here, if timer gets to a certain number then pop up message if they want to delete
		
		}
				
		//loadList(this)
		
		function deleteListItem(){
		
					if (confirm('Do you want to delete this food item from the list?')) {
					
					
						//&&&&& delete teh food item from teh array, and local storage - need to do this
						
						//find the element in the array, splice it based on what you found, rewrite the array back to local storage, refresh page
						
						//measure array to loop through it
						var intArraySize = arrListItemsFixed.length;
						
						//loop through the array and look for teh selected item, once found, delete using teh array.splice method
						
						
						for (i = 0; i < intArraySize; i++) {
							
							if (strFoodName == arrListItemsFixed[i]) {
							
							arrListItemsFixed.splice(i,1);
							}
						
						} 
						//rewrite teh array back to local storage once one of teh elements has been deleted
						localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
						//repopulate teh UI
						populateUIFromLocalStore();
						//refresh
						location.reload();
					}

					else {
					//do nothing instead if they dont want to delete
					}	
		
		}
				
				
			
				
		function deleteFileName(){
		
					if (confirm('Do you want to delete this list from the database?')) {
					

						//&&&&& delete the food item from teh array, and local storage - need to do this
						//&&&&& delete teh food item from teh array, and local storage - need to do this
						
						//find the element in the array, splice it based on what you found, rewrite the array back to local storage, refresh page
						
						//measure array to loop through it
						var intArraySize = strArrFileNames.length;
						
						//loop through the array and look for teh selected item, once found, delete using teh array.splice method
						
						
						for (i = 0; i < intArraySize; i++) {
							
							if (strFileName == strArrFileNames[i]) {
							
							strArrFileNames.splice(i,1);
							}
						
						} 
						//rewrite teh array back to local storage once one of teh elements has been deleted
						localStorage["fileNames"] = JSON.stringify(strArrFileNames);
						//repopulate teh UI
						populateUIFromLocalStore();
						//refresh
						location.reload();
						
						
						
						
						
					} 	

					else {
					//do nothing instead if they dont want to delete
					}	
		
		}
				
				

				
				
				
				

				//@@@@@ passes the selected item from the main page to the quantity page ready to accept a quantity of how many you need
				//only runs when teh button is pressed then depreseed - mouse up this runs
				function gotoQuantity(obj){
					//Clears the timer which is timing the user holding the button down
					clearTimeout(timer);
					//pass the obj paramter into the variable, obj will be set from the list view and will be passed using onClick, it will be the name of the food item
					strFoodName = ($(obj).text());
								
					//changes page to add the quantity that the person wants page
					$.mobile.changePage("#selectQuant");
					//updates the page with the name of the food item the user has selected
					$("#foodname").text(strFoodName); 
				}
	
				//this populates teh food list item that - if it exist already in local storage or creates a local storage space to save the items before repopulating them into teh UI
		function populateUIFromLocalStore(){
						//localStorage.removeItem("localStoredFooditems");
					if (typeof(Storage) !== "undefined") {
					//storage is available
				
						//tests to see if this particular key exists in local storage, returns true in this part of it doesn't exist
						if (localStorage.getItem("localStoredFooditems") === null) {
						//this means local store is empty for food item names
							
							$("#foodItemList").empty();
							//arrListItemsCurrent = [];
							//populate array ready to update the UI with preselected food items - used to give teh user an idea of what to type in
							arrListItemsFixed = ["Apples", "Aubergines", "Bananas", "Cherries", "Chives", "Fennel", "Potatoes", "Strawberries"];
	
							//store them in local storage as a string using the stringify routine
							localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
							
							//reads them back into teh program once they have been put in local storage, text now a string... needs splittign up / procesign before array / UI is populated
							//read in filenames from local storage filenNames is the key
					
							strDestringify = localStorage.getItem("localStoredFooditems")
							
							//sort text out so that it is ready to populate the array
							deStringifyLocStoString(strDestringify);
							//splits the array values ready to read into the UL list
							arrListItemsFixed = strDestringify.split(",");
						
							
							//measure the array ready to loop through and feed in the appends to update each LI with the right file name
							var intStrArrFoodListItemsSize = arrListItemsFixed.length;
						
							//<li><a onClick="loadList()">list 1 example</a></li>
							//</a></li>
							
										
							
							
								for (i = 0; i < intStrArrFoodListItemsSize; i++) {
								
								//need to store what is already on the screen in a variable, then check to see if each array entry exists in teh tex, if it does do nothing, else populate the page with teh HTML code
									var strHTMLConstructor = "<li><a onmousedown='startTimer(this)' onmouseup='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 
									// original -    var strHTMLConstructor = "<li><a onmousedown='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 

									
									$("#foodItemList").append(strHTMLConstructor);
									}
									
						
						
					
						}
					
						else {
						
						strFoodItems = localStorage.getItem("localStoredFooditems")
						
						
							$("#foodItemList").empty();
											
							
																
								//reads them back into teh program once they have been put in local storage, text now a string... needs splittign up / procesign before array / UI is populated
							//read in filenames from local storage filenNames is the key
							strFoodItems = localStorage.getItem("localStoredFooditems")
							
							
							
							//edits the string so that it doesn't have any of the extra characters in it
							strFoodItems = strFoodItems.replace('[','')
							strFoodItems = strFoodItems.replace(']','')
							strFoodItems = strFoodItems.replace(/"/g, '')
							
							
							//measure the array ready to loop through and feed in the appends to update each LI with the right file name
							
							
							//splits the array values ready to read into the UL list
							arrListItemsFixed = strFoodItems.split(",");
							var intStrFoodListArrSize = arrListItemsFixed.length;
							
							/*
							for (i = 0; i < intStrFoodListArrSize; i++) {
							alert(arrListItemsFixed[i]);
							}
							
							*/
						
							//<li><a onClick="loadList()">list 1 example</a></li>
							//</a></li>
							
										
							
							
								for (i = 0; i < intStrFoodListArrSize; i++) {
								
								//need to store what is already on the screen in a variable, then check to see if each array entry exists in teh tex, if it does do nothing, else populate the page with teh HTML code
									
									var strHTMLConstructor = "<li><a onmousedown='startTimer(this)' onmouseup='gotoQuantity(this)' >" + arrListItemsFixed[i] + "</a></li>"; //changed to onmousedown as on moue up it will test a timer to see if it is greater than a certain value and this will mean a hold buton 
									//var strHTMLConstructor = "<li><a onClick=gotoQuantity(this)>" + arrListItemsFixed[i] + "</a></li>";
									$("#foodItemList").append(strHTMLConstructor);
									}
							
							
						}
				
					}
				
				
					else {
				
				
						alert("no storage support! Cannot save, please try on another device")
				
					}
				
		
		}
	
		//used to capitalise the first letter of the food item input, so the array.sort mechanism works more effectively, otherwise A would be at the top and lower case a would be at the bottom
		function capitaliseFirstLetter(stringIn) {
			strTextFromMyFilter = stringIn.charAt(0).toUpperCase() + stringIn.slice(1);
			
		}
	

		//specifically for storing new food items to the array / UI / Local storage
		function storeNewFoodItems(){
			
			strTextFromMyFilter = $("#myFilter").val();
			//capitalise teh first word to neaten up the UI / filtered list
				capitaliseFirstLetter(strTextFromMyFilter);
			
			
				
					//var i;
					var wordFound = false;
					var arrLength = arrListItemsFixed.length;
			//&&&&& this needs ot run teh function which populates the UI with local storage food items using the array also - find out how to do this and put in
			
			//gets text just entered into the search box
			
			if (strTextFromMyFilter == "") {
			
				alert("You haven't typed the name of the food item you wish to add to the database, please type in a name");
			
			}
			
			else {
							
					for (i = 0; i < arrLength; i++) {
						if (strTextFromMyFilter == arrListItemsFixed[i]) {
							wordFound = true;
							break;
						}
						
					}	
					
					
					if (wordFound == false){
						
						//this means that it is a new item to be added to the list, we are going to add to array 
						arrListItemsFixed.push(strTextFromMyFilter);
						arrListItemsFixed.sort();
						
						
						// store teh array contents to local storage as a single string
						localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsFixed);
						//var strHTMLConstructor = "<li> <a onClick='gotoQuantity(this)'>" + strTextFromMyFilter + "</a></li>";
						//$("#foodItemList").append(strHTMLConstructor);
						
						//populate UI from local storerefresh page
						
						
						
						populateUIFromLocalStore();
						location.reload();
						
						
					}
					else if (wordFound == true){
						alert("This word is already in the list, select it from below please");
					
					}
					
			
					$.mobile.changePage("#foodItems")
			
			}
			
			
					
			/*
						
						//get the food item that the person has just entered in the enter new food item input text box
						textfromNewFoodItem = $("#myFilter").val();
						//get the food items from local storage
						var strItemNames = JSON.parse(localStorage["localStoredFooditems"]);
						
						//checks to see if the newly entered filename exists in the array - not the best routine but works for now - returns true if the filename is found in this string
						//&&&&& change routine so array is populated and it checks to see if teh file name exists in the array - better routine
						var booitemNameExists = strItemNames.includes(textFromInpFileName)
						
						
						//checks to see if fileNames exists first, if not it puts the first filename in
						
						if (booitemNameExists == true){
							
								
								
								alert("this food item already exists in teh list, please select it from below")
									
								
						} 	
		
													
					
							//save the file name and all list items & quants if a valid filename has been entered
						else if (booitemNameExists == false) {
										
							//add the new food item name to the  array
							arrListItemsCurrent.push(textfromNewFoodItem);
							
							//add item names in localStorage with the string of food item names, which can be split later using comma and pulled back into the initial screen
							localStorage["localStoredFooditems"] = JSON.stringify(arrListItemsCurrent);
							
							
									
						}
						
						//populate the page with food items -  done else where
						
						
						
						
						
						
						
						
						*/
			
			
			
			
			
			
			
			
			
			
			
			
		}
	
	

	

		function saveList(){
	
			//get the text from the input text box. this will be the filename to store.
			textFromInpFileName = $("#inpFileName").val();
			
			//checks to see if local storage is availabel on teh device, if it is it will do this...	
			if (typeof(Storage) !== "undefined") {
							
					//these characters are not allowed in teh filename as teh routine has to take these out when data is transferred from teh filename array. If I had time I would implement a routine which added a qualifier delimiter when these were added so they wouldn't be split  when these were found in certain instances
			
					//check to see if a filename has been entered at all
					if (textFromInpFileName == "") {
						alert("Please enter a filename before saving");
						
						//&&&&& put cursor in the input box ready for typing - NOT WORKING
						var input = document.querySelector("#myFilterFirstPage")
						input.focus();
		
						
				
					}
					//check to see if a comma has been entered as it will ruin teh comma seperated values later for readback
					else if (textFromInpFileName.includes(",")) {
						alert("No commas in the file name please")
					
					}
					//check to see if a speech mark has been entered as it will MIGHT ruin teh comma seperated values later for readback
					else if (textFromInpFileName.includes('"')) {
						alert("No speechmarks in the file name please")
					
					}
					
					//tests for [ and ] in the file name also as these make up part of teh text using the stringify method
					else if (textFromInpFileName.includes('[')) {
						alert("No [ in the file name please")
					
					}
					
					//tests for [ and ] in the file name also as these make up part of teh text using the stringify method
					else if (textFromInpFileName.includes(']')) {
						alert("No ] in the file name please")
					
					}
					
							
					//test whether the localstorage element is empty, if it is it will do this					
					else if (localStorage.getItem("fileNames") === null) {
								
							//add the new file name to the filename array to the end
							strArrFileNames.push(textFromInpFileName);
						
							//update fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
						localStorage["fileNames"] = JSON.stringify(strArrFileNames);
						
						
						//go save all items from array, all quantities, and whether each item has been ticked or not to local storage
						saveListItemsAndQuant()

						
					}
								
						//this means localStorage exists already, valid filename has been entered - no blank or commas, but fileNames doesn't exist in local storage - so it creates it 
					else {
												
							
						//updates the variable fileNames in local storage with the contents of teh array which have been stored as a string like ["hello","hello 2"] etc
						//localStorage["fileNames"] = JSON.stringify(strArrFileNames);
						
						//reads the filenames into the program as a string of text
						var strFileNames = JSON.parse(localStorage["fileNames"]);
						
						//checks to see if the newly entered filename exists in the array - not the best routine but works for now - returns true if the filename is found in this string
						var booFileNameExists = strFileNames.includes(textFromInpFileName)
						
						
						//checks to see if fileNames exists first, if not it puts the first filename in
						
						if (booFileNameExists == true){
							
								
								
								//alert to say - filename already exists, overwrite or cancel - overwrites if they select overwrite
								
								if (confirm('This filename already exists; do you want to overwrite?')) {
							
		
								//do not add the filename to the array as it already exists, this line of code will duplicate teh filename existing on teh first screen in the li
								//strArrFileNames.push(textFromInpFileName);
							
								//add fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
								localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
								//go an save all of the items in this particular list to local storagem, along with their quantities and whther they have been ticked or not
								saveListItemsAndQuant()
									
								
								} 	
		
								else {
								//do nothing instead
								}	
													
						}
							//save the file name and all list items & quants if a valid filename has been entered
						else if (booFileNameExists == false) {
										
									
							//add the new file name to the filename array
							strArrFileNames.push(textFromInpFileName);
							
							//add fileNames in localStorage with the string of filenames, which can be split later using comma and pulled back into the initial screen
							localStorage["fileNames"] = JSON.stringify(strArrFileNames);
							
							//go an save all of the items in this particular list to local storagem, along with their quantities and whther they have been ticked or not
							saveListItemsAndQuant()
									
						}
							
						
						
					}
					
			} 
				
				
				
			//called if localStorage doesn't exist	on the device
			else {
				alert("no storage support! Cannot save, please try on another device")
			}
							
			
		
		}
		
		
		// Saves the contents of the list with the file name as the key for the data structure in localstorage
		
		function saveListItemsAndQuant(){
				
				
				//variables declared to construct the name with listnamefood or listnamequant
				var locStorNameListItems = textFromInpFileName+"food"
				var locStorNameQuant = textFromInpFileName+"quant"
				var locStorNameTicked = textFromInpFileName+"ticked"
				
				
				//adds the list items and quants into localstorage so they can be pulled back later
				localStorage[locStorNameListItems] = JSON.stringify(arrListItemsCurrent);
				localStorage[locStorNameQuant] = JSON.stringify(arrItemQuant);	
				localStorage[locStorNameTicked] = JSON.stringify(arrItemTicked);	
				
				//this syntax works for pulling the data back from local storage - this syntax didn;t work to store it though - using variable+"string"
		
					
				var strItemsinCurrList = JSON.parse(localStorage[locStorNameListItems]);
				var strQuantsinCurrList = JSON.parse(localStorage[locStorNameQuant]);	
				var strTickedinCurrList = JSON.parse(localStorage[locStorNameTicked]);	
				
				goToStartAfterSave();
			
		}
		
		
		
		
		
		
		
		
		
		//@@@@@ - need to do - trying to mimic the text input being selected or having a null string in there and pressing enter, as the UI doesn't load properly after population of file names until this happens
	
		function mimicEnterPressed(){
 
		
		}
		
	
	//global variables, hold the list items taken from local storage, and teh quantities, of the selected filename - to populate the correct arrays and pages with correct food stuffs and quantities later	
	var retrievedFoodList;
	var retrievedFoodQuant;
	var retrievedFoodTicked;
	var strListName; //global as we need to send the back to teh textbox input box on the final list page when the list is loaded
	
	//function will load all list items when teh filename has been clicked from teh start screen
	
		function loadList(listName){
				clearTimeout(timer2);
				strListName = $(listName).parent().text();
				
				
				//add "food" to the end and "quant" as these are teh names of teh data items which store plain text the contents of the list arrays (both quant and food items)
				var listItem = strListName+"food";
				var listQuant = strListName+"quant";
				var listTicked = strListName+"ticked";
				
				//listItem and  listQuant now become the name of the local storage item that we want with correct string concatenated
				
				retrievedFoodList = localStorage.getItem(listItem);
				retrievedFoodQuant = localStorage.getItem(listQuant);
				retrievedFoodTicked = localStorage.getItem(listTicked);
				
				
				//remove all unwanted characters ready to populate the correct arrays / places on screen
				
				retrievedFoodList = retrievedFoodList.replace('[','')
				retrievedFoodList = retrievedFoodList.replace(']','')
				retrievedFoodList = retrievedFoodList.replace(/"/g, '')
				
				retrievedFoodQuant = retrievedFoodQuant.replace('[','')
				retrievedFoodQuant = retrievedFoodQuant.replace(']','')
				retrievedFoodQuant = retrievedFoodQuant.replace(/"/g, '')
				
				retrievedFoodTicked = retrievedFoodTicked.replace('[','')
				retrievedFoodTicked = retrievedFoodTicked.replace(']','')
				retrievedFoodTicked = retrievedFoodTicked.replace(/"/g, '')
				

				
				//need to populate the arrays  / UIs etc from this point onwards
				fromListNameToEditList()
				
				}
			
			
				function fromListNameToEditList(){
				
				//ckear all variables & data structures etc to load the new list
				intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
				arrListItemsCurrent = []; //clears this array ready to be populated again with the next list
				arrItemQuant = []; //as above
				arrItemTicked = []; // as above
				intIndexFound = 0; //helps delete entry
				itemSplitHolder =""; //helps delete entry
				//possibly need to clear some other global variables etc - check
				
				
				//split the fooditems, quantities and ticked values to populate the array ready to load in the correct data from teh filename given
				arrListItemsCurrent = retrievedFoodList.split(",");
				arrItemQuant = retrievedFoodQuant.split(",");
				
				//the routine underneath converts the string of text true and false values to boolean values to populate the array with teh correct values, otherwise other routines which later rely on values inside being set to true or false boolean values cannot run
				var arrStringItemTicked = retrievedFoodTicked.split(",");
				
				intIndexPointer = arrListItemsCurrent.length;
				
				for (i = 0; i < intIndexPointer; i++) {
				if (arrStringItemTicked[i] == "true") {
					arrItemTicked[i] = true
				}
				
				else {
					arrItemTicked[i] = false
				}
				
			}	
				
			
				//populate the list ready & go to list edit page
				
				
				
				goToFinalShoppingList();
			//set the textbox on the final list screen to the filename so it can be recorded over
			document.getElementById("inpFileName").value = strListName;
		
		}
	
		
	
	
	
	
	
	// @@@@@ - need to do - I think I need to change this, instead of storing data to the list, it stores it to local storage instead... have a page that allows you to click to create a new list, give it a name, store the list name in secondary storage, then this can be used to pull the data back
	
	function storeDataToArray(){ //on video this function is called backToList
				
		//gets the contents of the spinner object, uses val to convert the string of text to an integer
		quantOfFood = $("#spin").val(); 
		
		//alert(quantOfFood + " " + strFoodName + " added to the list"); //pops an alert up to tell them what they have added to the list
		
		//puts spinner back to 0
		resetSpinner();
		
		//adds chosen food and quant to a dictionary, not needed now we have the array
		//dictChosenItems[strFoodName] = quantOfFood; //add food and quant to dictionary
		
		//alert(JSON.stringify(dictChosenItems)); //show the dictionary data structure
		
		
		
		// for loop here to check to see if food item has been selected already and only updates quant only if it has, rather than adding redundant data to the list in the form of duplicated list items
		
		var i;
		var itemFound = false;
		var indexFoundAt;
		for (i = 0; i < intIndexPointer; i++) {
		
			if (arrListItemsCurrent[i] == strFoodName) {
			itemFound = true
			indexFoundAt = i;
			
			}
				
		}
		//(could have used append method instead
		
		
		if (itemFound == false) {
		
		//addss food and quantity to 2 arrays, will be controlled by same variable to ensure that they are both populated at the same index
		arrListItemsCurrent[intIndexPointer] = strFoodName;
		arrItemQuant[intIndexPointer] = quantOfFood;
		arrItemTicked[intIndexPointer] = false;
		intIndexPointer++;	
		
		}
		
		//runs this if the item already exists - locates its index and updates only the quantity
		
		else if (itemFound == true) {
		var intQuantConverter = parseInt(arrItemQuant[indexFoundAt]);
		var intNewQuantConverter = parseInt(quantOfFood);
		var intTotalQuant = intQuantConverter + intNewQuantConverter;
		arrItemQuant[indexFoundAt] = intTotalQuant;
		
		}
		
		

		
		//$("#listElements").append('<li>' + strFoodName + ' ' + quantOfFood + '<button class="delButton"> delete </button>' + '</li>')
		
		$.mobile.changePage("#foodItems")
		
			
	}
	
	
	
	
	function goToFinalShoppingList(){ //in tutorial video this is called showChosenItems
	$.mobile.changePage("#finalShoppingList"); 
	populateListPage();
			
	}
	
	
	//used to populate the final list, works in tandem with the delete item from list, uses append so that now I can work on the tick mechanism
	function populateListPage(){
		//clears all list elements in the UI in order to be repopulated - some things on other screens could have changed what is to be displayed on the screen		
		$("#listElements").empty();
				
		//old routine below
		/*
		for (i = 0; i < intIndexPointer; i++) {
			strHTMLConstructor = "<li>" + i + " " + arrListItemsCurrent[i] + " " + arrItemQuant[i] + "  "  + "<input type='checkbox' class='allCheckBox'>" + "<button class='strikeButton' onclick='strikeText(this)'>Tick</button>" + "<button class='delButton' onclick='deleteThis(this)'>Delete?</button>" + "</li>";
				$("#listElements").append(strHTMLConstructor);
				
				codeToSearch += strHTMLConstructor;
		}
		
		*/
		
		//new routine
					
		
			for (i = 0; i < intIndexPointer; i++) {
				
				if (arrItemTicked[i] == false) {
					
					strHTMLConstructor = "<li>" + i + " " + arrListItemsCurrent[i] + "   X   " + arrItemQuant[i] + "  "  + "<input type='checkbox' id='checkbox" + i +"' unchecked onchange='newTickMethod(this)'></input>" + "<button class='delButton' onclick='deleteThis(this)'>Delete?</button>" + "</li>";
					$("#listElements").append(strHTMLConstructor);
					
					codeToSearch += strHTMLConstructor;
				}
				
				else if (arrItemTicked[i] == true) {
				
					strHTMLConstructor = "<li>" + i + " " + "<strike>" + arrListItemsCurrent[i] + "   X   " + arrItemQuant[i] + "  " + "</strike>"  + "<input type='checkbox' id='checkbox" + i +"' checked onchange='newTickMethod(this)'></input>" + "<button class='delButton' onclick='deleteThis(this)'>Delete?</button>" + "</li>";
					$("#listElements").append(strHTMLConstructor);
					
					codeToSearch += strHTMLConstructor;
				
				}
			
				
			}
		
		
	}	
	
	

		function newTickMethod (htmlText){
		//measure array into variable
		//get position in array from text returned & store this in variable
		//set checked status & set to checked='true' in array for this element only
		
		//in populate function - if checked = true then add one line of code else add another line of code
		var strHtmltext = $(htmlText).parent().text();
	
		var textToSplitHere = [];
		textToSplitHere = strHtmltext.split(" ");
		var intIndexOfCurrItem = textToSplitHere[0];
		
		
		var strCheckBoxID = "checkbox"+intIndexOfCurrItem
		
		var checkboxChecked = document.getElementById(strCheckBoxID).checked;
	
		
		
		//if toggle 1 then tick true
		
		if (checkboxChecked == true) {
		
		arrItemTicked[intIndexOfCurrItem] = true;
		
		}
		
		if (checkboxChecked == false) {
		
		arrItemTicked[intIndexOfCurrItem] = false;
		
		}
		
		populateListPage();
		
		//if toggle 2 then tick false
		}
	
	
	
	function strikeText(textToStrike){
		
		
		var textToStrike = $(textToStrike).parent().text();
		
		
		var deleteBeforeStrike = textToStrike.replace("TickDelete?", "");
		
		var struckText = deleteBeforeStrike.strike();
	
		//$(this).replaceWith(struckText);
		

		
		var editedTextWithStrike = codeToSearch.replace(deleteBeforeStrike, struckText);
		
		
		$("#displayListItems").html(editedTextWithStrike);
		
		//routine works, but keeps overwriting page every load - need to transfer the striuck text into output variable
		
		
		//var element = $(this).child();
		//alert(element)
		//$(this).parent().replaceWith(editedTextWithStrike);
		
		
		
	}
	

	

	
	
// @@@@@@@@@@@@@@@@@@@@@@@@@ functions underneath can be left alone for the minute as they are working and done @@@@@@@@@@@@@@@@@@@@@@@@@
	

	
	
	//@@@@@ - need to do - use APPEND instead - first routine that allows you to delete from yoru currently constructed list
	//objThisRef is the object name passed from the button click, passes it so that it can delete the objects parent only and delete the whoel entry, nothing more / nothing less	
	function deleteThis(objThisRef){
	
		var objDetails = $(objThisRef).parent().text();
		$(objThisRef).parent().remove();
		
		//split string run to find out what index number it is stored at in the array system
		splitStringDelFromArray(objDetails, " ");
		

	}
	
	//@@@@@ - need to do - use APPEND routine instead - second routine that allows you to delete from your currently constructed list
	
	//splitstring - takes the string of text of the object that is being deleted, and splits it down to return its index in the array system - used for teh delete item routine
	function splitStringDelFromArray (stringToSplit, seperator){
		var arrayOfStrings = stringToSplit.split(seperator);
			//alerts used to track what was happening inside of the array in order to complete the delete entry routine
		//intIndexFound = arrListItemsCurrent.indexOf(arrayOfStrings[0]);
		//alert("item we are looking for is" + arrayOfStrings[0]);
		intIndexFound = parseInt(arrayOfStrings[0]);
		//alert("index in question is " + intIndexFound);
		
		//empty the array so it always stores the index of teh deleted item in index 0 of this array
				//its index is then used to delete it out of the array using the splice method, taken out of all 3 arrays - item name, quant, item ticked
		
		arrListItemsCurrent.splice(intIndexFound,1); 
		arrItemQuant.splice(intIndexFound,1);
		arrItemTicked.splice(intIndexFound,1);
		
		//alert("arrListItemsCurrent index 0 now contains" + arrListItemsCurrent[0]);
		//alert("arrListItemsCurrent index 1 now contains" + arrListItemsCurrent[1]);
		//alert("arrListItemsCurrent index 2 now contains" + arrListItemsCurrent[2]);
		
		arrayOfStrings = [];
		intIndexPointer--;
		
		goToFinalShoppingList();		
	}
	
	
	
	//add function that asks do you want to save before quitting?
	function saveBeforeQuitting(){
				if (confirm('Are you sure you want to go back to the home screen?')) {
				// Save it first - run the save routine
				
					if (confirm('Do you wish to save this list first?')) {
					// Save it first - run the save routine
					
					//go to save the list screen
					goToFinalShoppingList();	
					
					}
					
					else {
					document.getElementById("inpFileName").value = "";
					$.mobile.changePage("#newExistingLists")
					
					}
				
				} 	
				
				else {
				//do nothing
				
				}	
				
				//go to save the list screen
				//goToFinalShoppingList();	
				
			
				
		} 	
		
		

	
	
	
	
		//@@@@@ resets the spinner object	
		function resetSpinner(){
			$("#spin").val(1); //resets the spinner back to one for better user experience
		}
		
		//@@@@@ resets the spinner object then returns to main page
		function resetSpinreturnHome(){
			$("#spin").val(1); //resets the spinner back to one for better user experience
			$.mobile.changePage("#foodItems")
		}
		

		
		//USED TO GO FROM EXISTING FILEs page to food items list, resets index counters etc so a new list can be populated
		function goToFoodItems (){
		
		//&&&&& this needs ot run the function which populates the UI with local storage food items using the array also - find out how to do this and put in
		
			
			//little finesse routine - if a person types in a filename to search for and it doesn;t appear in the search from the initial screen, it will transfer the name they wanted into the file name ready to save
			var strPotentialnewListName = $("#myFilterFirstPage").val();
			
			//do nothing if teh name box is empty when they click to create a new list item
			if (strPotentialnewListName == "") {
			
			
			}
			
			else {
			
			$("#inpFileName").val(strPotentialnewListName);
			
			}
		
		
		$.mobile.changePage("#foodItems"); //goes back to all items page so the user can add more items to their shoping list
		
		 intIndexPointer = 0 //used to increment array indexes so we can use a value to store the next food stuffs & quantities
		 arrListItemsCurrent = []; //clears this array ready to be populated again with the next list
		 arrItemQuant = []; //as above
		 arrItemTicked = []; // as above
		 intIndexFound = 0; //helps delete entry
		 itemSplitHolder =""; //helps delete entry
		 
		 
		 
		 
		 
		
		}

		//return to main screen
		function returnNewAndExistingLists(){
			$.mobile.changePage("#newExistingLists"); //goes back to all items page so the user can add more items to their shoping list
			//refreshPage();
		
		}

		//only needed to test, deletes the local storage element I have been working with to test the app, delete when the app is finished
		function delLocalStorage(){
		var temp = localStorage.getItem("fileNames")

		localStorage.removeItem("fileNames");
		var temp1 = localStorage.getItem("localStoredFooditems")
		localStorage.removeItem("localStoredFooditems");
		location.reload();

		
		}
		// after you have saved your list, takes you back to the home screen and then refreshes the page so teh new list shows up
		function goToStartAfterSave(){
		$.mobile.changePage("#newExistingLists");
		location.reload();
		
		}
		

	
	</script>
	
		
	
</head>



<body>



<!------------------------------------------ All items available -------------------------------------------------->
	

	<div data-role="page" id="newExistingLists">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">

			</div>
		
			
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Your Lists</h2>
				
				
				<form class="ui-filterable">
					<input id="myFilterFirstPage" data-type="search" placeholder="Search for an existing list..." >
					
				</form>
				<button id="btnCreateNewList" onclick="goToFoodItems()">Create New List</button>
				<ul id="newListFileNames" data-role="listview" data-filter="true" data-input="#myFilterFirstPage" data-autodividers="false" data-inset="true">
					
				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<button id="deleteLocalStor" onclick="delLocalStorage()">Delete All Lists</button>
			</div>

		</div>
	

	</div>

	
<!------------------------------------------ All items available -------------------------------------------------->
	
	
	
	<div data-role="page" id="foodItems">
		
		
		
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
	
			</div>
  
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
				<h2>Select your food...</h2>
				
				<form class="ui-filterable">
					<input id="myFilter" data-type="search" placeholder="Enter a food item...">
					
				</form>
				<button id="btnStoreNewFood" onclick="storeNewFoodItems()">Store new food item </button>
				<ul id="foodItemList" data-role="listview" data-filter="true" data-input="#myFilter" data-autodividers="true" data-inset="true">
			

				</ul>
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
					<li><a href="#" data-icon="home" onclick="saveBeforeQuitting();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>

<!----------------------------------------- enter quantity of chosen item page ----------------------------------------->
		
	<div data-role="page" id="selectQuant">
		
		<div data-role="header">
			<div data-role="main" class="ui-content">
			</div>
			
			
  		</div>
		
	
		<div data-role="main" class="ui-content">
			<div data-role="main" class="ui-content">
			<h2>Select Quantities</h2>
			
			
			<div class="ui-field-contain">
				<label for="spin" id="foodname"></label>
				<input type="text" data-role="spinbox" name="spin" id="spin" value="1" min="0" max="100"/>
			
			</div>
				
							
			</div>
		</div>
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#" data-icon="check" onclick="storeDataToArray();return false;"></a></li>
					<li><a href="#" data-icon="back" onclick="resetSpinreturnHome();return false;"></a></li>
					<li><a href="#" data-icon="shop" onclick="goToFinalShoppingList();return false;"></a></li>
			
				
				</ul>
			</div>

		</div>
	

	</div>
	
	<!----------------------------------------- Final made list ----------------------------------------->
		
	<div data-role="page" id="finalShoppingList">
		<div data-role="header">
			<input id="inpFileName" placeholder="Give your list a name..."> </input>
		
		
		</div>
		
	
		<div data-role="main" class="ui-content">
			<div id="displayListItems">
				<ul id="listElements">
			
				</ul>
			</div>
		</div>
		
		
		
		<div data-role="footer" data-position="fixed">
			<div data-role="navbar">
				<ul>
					<li><a href="#foodItems" data-icon="bullets"></a></li>
					<li><a href="#" data-icon="home" onclick="saveBeforeQuitting();return false;"></a></li>
					<li><a href="#" data-icon="check" onclick="saveList();return false;"></a></li>
				</ul>
			</div>
			<!-- <h2>&copy; Copyright Paul Treadwell 2016 </h2> -->
		</div>
	

	</div>


	
</body>
</html>
